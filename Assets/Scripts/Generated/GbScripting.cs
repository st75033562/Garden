// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gb_scripting.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Gameboard.Script {

  /// <summary>Holder for reflection information generated from gb_scripting.proto</summary>
  public static partial class GbScriptingReflection {

    #region Descriptor
    /// <summary>File descriptor for gb_scripting.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GbScriptingReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJnYl9zY3JpcHRpbmcucHJvdG8SEGdhbWVib2FyZC5zY3JpcHQiNwoSU2Vu",
            "c29yTm90aWZpY2F0aW9uEhMKC3JvYm90X2luZGV4GAIgASgFEgwKBGRhdGEY",
            "AyABKAwiNwoSU2V0RWZmZWN0b3JSZXF1ZXN0EhMKC3JvYm90X2luZGV4GAIg",
            "ASgFEgwKBGRhdGEYAyABKAwiIAoLSm9pblJlcXVlc3QSEQoJcm9ib3RfbnVt",
            "GAEgASgFImcKCFZhcmlhYmxlEgwKBG5hbWUYASABKAkSLAoEdHlwZRgCIAEo",
            "DjIeLmdhbWVib2FyZC5zY3JpcHQuVmFyaWFibGVUeXBlEhAKCHdyaXRhYmxl",
            "GAMgASgIEg0KBXZhbHVlGAQgASgJInwKDEpvaW5SZXNwb25zZRIqCgVlcnJv",
            "chgBIAEoDjIbLmdhbWVib2FyZC5zY3JpcHQuRXJyb3JDb2RlEhEKCXJvYm90",
            "X251bRgCIAEoBRItCgl2YXJpYWJsZXMYAyADKAsyGi5nYW1lYm9hcmQuc2Ny",
            "aXB0LlZhcmlhYmxlIlYKFVVwZGF0ZVZhcmlhYmxlUmVxdWVzdBIMCgRuYW1l",
            "GAEgASgJEhEKCW9wZXJhdGlvbhgCIAEoBRINCgV2YWx1ZRgDIAEoCRINCgVp",
            "bmRleBgEIAEoBSIYChZVcGRhdGVWYXJpYWJsZVJlc3BvbnNlIg0KC1BpbmdS",
            "ZXF1ZXN0Ig4KDFBpbmdSZXNwb25zZSItCg5WYXJpYWJsZVVwZGF0ZRIMCgRu",
            "YW1lGAEgASgJEg0KBXZhbHVlGAIgASgJIlAKG1ZhcmlhYmxlc1VwZGF0ZU5v",
            "dGlmaWNhdGlvbhIxCgd1cGRhdGVzGAEgAygLMiAuZ2FtZWJvYXJkLnNjcmlw",
            "dC5WYXJpYWJsZVVwZGF0ZSqwAQoJQ29tbWFuZElkEhsKF2NtZF9zZW5zb3Jf",
            "bm90aWZpY2F0aW9uEAASFAoQY21kX3NldF9lZmZlY3RvchABEgwKCGNtZF9q",
            "b2luEAISFAoQY21kX3NldF92YXJpYWJsZRADEgwKCGNtZF9waW5nEAQSFwoT",
            "Y21kX3VwZGF0ZV92YXJpYWJsZRAFEiUKIWNtZF92YXJpYWJsZXNfdXBkYXRl",
            "X25vdGlmaWNhdGlvbhAGKjcKCUVycm9yQ29kZRIOCgplY19zdWNjZXNzEAAS",
            "GgoWZWNfaW52YWxpZF9yb2JvdF9pbmRleBABKkYKDFZhcmlhYmxlVHlwZRIN",
            "Cgl2dF9zY2FsYXIQABILCgd2dF9saXN0EAESDAoIdnRfc3RhY2sQAhIMCgh2",
            "dF9xdWV1ZRADKk8KDUxpc3RPcGVyYXRpb24SDgoKbG9wX2luc2VydBAAEg4K",
            "CmxvcF9yZW1vdmUQARINCglsb3BfY2xlYXIQAhIPCgtsb3BfcmVwbGFjZRAD",
            "KkEKDlF1ZXVlT3BlcmF0aW9uEg8KC3FvcF9lbnF1ZXVlEAASDwoLcW9wX2Rl",
            "cXVldWUQARINCglxb3BfY2xlYXIQAio6Cg5TdGFja09wZXJhdGlvbhIMCghz",
            "b3BfcHVzaBAAEgsKB3NvcF9wb3AQARINCglzb3BfY2xlYXIQAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Gameboard.Script.CommandId), typeof(global::Gameboard.Script.ErrorCode), typeof(global::Gameboard.Script.VariableType), typeof(global::Gameboard.Script.ListOperation), typeof(global::Gameboard.Script.QueueOperation), typeof(global::Gameboard.Script.StackOperation), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Gameboard.Script.SensorNotification), global::Gameboard.Script.SensorNotification.Parser, new[]{ "RobotIndex", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gameboard.Script.SetEffectorRequest), global::Gameboard.Script.SetEffectorRequest.Parser, new[]{ "RobotIndex", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gameboard.Script.JoinRequest), global::Gameboard.Script.JoinRequest.Parser, new[]{ "RobotNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gameboard.Script.Variable), global::Gameboard.Script.Variable.Parser, new[]{ "Name", "Type", "Writable", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gameboard.Script.JoinResponse), global::Gameboard.Script.JoinResponse.Parser, new[]{ "Error", "RobotNum", "Variables" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gameboard.Script.UpdateVariableRequest), global::Gameboard.Script.UpdateVariableRequest.Parser, new[]{ "Name", "Operation", "Value", "Index" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gameboard.Script.UpdateVariableResponse), global::Gameboard.Script.UpdateVariableResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gameboard.Script.PingRequest), global::Gameboard.Script.PingRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gameboard.Script.PingResponse), global::Gameboard.Script.PingResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gameboard.Script.VariableUpdate), global::Gameboard.Script.VariableUpdate.Parser, new[]{ "Name", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Gameboard.Script.VariablesUpdateNotification), global::Gameboard.Script.VariablesUpdateNotification.Parser, new[]{ "Updates" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///  naming rules:
  ///  for a notification command, e.g. cmd_sensor_notification, there should be a message named e.g. SensorNotification
  ///  for a request command, e.g. cmd_set_effector, there should be a message named e.g. SetEffectorRequest
  ///  		if the request has a response, then it should be named as e.g. SetEffectorResponse
  ///  NOTE: the enum prefix, e.g. cmd_, is to avoid name conflict in Python
  /// </summary>
  public enum CommandId {
    [pbr::OriginalName("cmd_sensor_notification")] CmdSensorNotification = 0,
    [pbr::OriginalName("cmd_set_effector")] CmdSetEffector = 1,
    [pbr::OriginalName("cmd_join")] CmdJoin = 2,
    [pbr::OriginalName("cmd_set_variable")] CmdSetVariable = 3,
    [pbr::OriginalName("cmd_ping")] CmdPing = 4,
    [pbr::OriginalName("cmd_update_variable")] CmdUpdateVariable = 5,
    [pbr::OriginalName("cmd_variables_update_notification")] CmdVariablesUpdateNotification = 6,
  }

  public enum ErrorCode {
    [pbr::OriginalName("ec_success")] EcSuccess = 0,
    [pbr::OriginalName("ec_invalid_robot_index")] EcInvalidRobotIndex = 1,
  }

  public enum VariableType {
    [pbr::OriginalName("vt_scalar")] VtScalar = 0,
    [pbr::OriginalName("vt_list")] VtList = 1,
    [pbr::OriginalName("vt_stack")] VtStack = 2,
    [pbr::OriginalName("vt_queue")] VtQueue = 3,
  }

  public enum ListOperation {
    [pbr::OriginalName("lop_insert")] LopInsert = 0,
    [pbr::OriginalName("lop_remove")] LopRemove = 1,
    [pbr::OriginalName("lop_clear")] LopClear = 2,
    [pbr::OriginalName("lop_replace")] LopReplace = 3,
  }

  public enum QueueOperation {
    [pbr::OriginalName("qop_enqueue")] QopEnqueue = 0,
    [pbr::OriginalName("qop_dequeue")] QopDequeue = 1,
    [pbr::OriginalName("qop_clear")] QopClear = 2,
  }

  public enum StackOperation {
    [pbr::OriginalName("sop_push")] SopPush = 0,
    [pbr::OriginalName("sop_pop")] SopPop = 1,
    [pbr::OriginalName("sop_clear")] SopClear = 2,
  }

  #endregion

  #region Messages
  public sealed partial class SensorNotification : pb::IMessage<SensorNotification> {
    private static readonly pb::MessageParser<SensorNotification> _parser = new pb::MessageParser<SensorNotification>(() => new SensorNotification());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SensorNotification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gameboard.Script.GbScriptingReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SensorNotification() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SensorNotification(SensorNotification other) : this() {
      robotIndex_ = other.robotIndex_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SensorNotification Clone() {
      return new SensorNotification(this);
    }

    /// <summary>Field number for the "robot_index" field.</summary>
    public const int RobotIndexFieldNumber = 2;
    private int robotIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RobotIndex {
      get { return robotIndex_; }
      set {
        robotIndex_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SensorNotification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SensorNotification other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RobotIndex != other.RobotIndex) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RobotIndex != 0) hash ^= RobotIndex.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RobotIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RobotIndex);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RobotIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RobotIndex);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SensorNotification other) {
      if (other == null) {
        return;
      }
      if (other.RobotIndex != 0) {
        RobotIndex = other.RobotIndex;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            RobotIndex = input.ReadInt32();
            break;
          }
          case 26: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetEffectorRequest : pb::IMessage<SetEffectorRequest> {
    private static readonly pb::MessageParser<SetEffectorRequest> _parser = new pb::MessageParser<SetEffectorRequest>(() => new SetEffectorRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetEffectorRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gameboard.Script.GbScriptingReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetEffectorRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetEffectorRequest(SetEffectorRequest other) : this() {
      robotIndex_ = other.robotIndex_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetEffectorRequest Clone() {
      return new SetEffectorRequest(this);
    }

    /// <summary>Field number for the "robot_index" field.</summary>
    public const int RobotIndexFieldNumber = 2;
    private int robotIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RobotIndex {
      get { return robotIndex_; }
      set {
        robotIndex_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetEffectorRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetEffectorRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RobotIndex != other.RobotIndex) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RobotIndex != 0) hash ^= RobotIndex.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RobotIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RobotIndex);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RobotIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RobotIndex);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetEffectorRequest other) {
      if (other == null) {
        return;
      }
      if (other.RobotIndex != 0) {
        RobotIndex = other.RobotIndex;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            RobotIndex = input.ReadInt32();
            break;
          }
          case 26: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class JoinRequest : pb::IMessage<JoinRequest> {
    private static readonly pb::MessageParser<JoinRequest> _parser = new pb::MessageParser<JoinRequest>(() => new JoinRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gameboard.Script.GbScriptingReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRequest(JoinRequest other) : this() {
      robotNum_ = other.robotNum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinRequest Clone() {
      return new JoinRequest(this);
    }

    /// <summary>Field number for the "robot_num" field.</summary>
    public const int RobotNumFieldNumber = 1;
    private int robotNum_;
    /// <summary>
    ///  max robot number for sensor notification
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RobotNum {
      get { return robotNum_; }
      set {
        robotNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RobotNum != other.RobotNum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RobotNum != 0) hash ^= RobotNum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RobotNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RobotNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RobotNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RobotNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinRequest other) {
      if (other == null) {
        return;
      }
      if (other.RobotNum != 0) {
        RobotNum = other.RobotNum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RobotNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Variable : pb::IMessage<Variable> {
    private static readonly pb::MessageParser<Variable> _parser = new pb::MessageParser<Variable>(() => new Variable());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Variable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gameboard.Script.GbScriptingReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Variable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Variable(Variable other) : this() {
      name_ = other.name_;
      type_ = other.type_;
      writable_ = other.writable_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Variable Clone() {
      return new Variable(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Gameboard.Script.VariableType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gameboard.Script.VariableType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "writable" field.</summary>
    public const int WritableFieldNumber = 3;
    private bool writable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Writable {
      get { return writable_; }
      set {
        writable_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 4;
    private string value_ = "";
    /// <summary>
    ///  in json
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Variable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Variable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (Writable != other.Writable) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Writable != false) hash ^= Writable.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Writable != false) {
        output.WriteRawTag(24);
        output.WriteBool(Writable);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Writable != false) {
        size += 1 + 1;
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Variable other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Writable != false) {
        Writable = other.Writable;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            type_ = (global::Gameboard.Script.VariableType) input.ReadEnum();
            break;
          }
          case 24: {
            Writable = input.ReadBool();
            break;
          }
          case 34: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class JoinResponse : pb::IMessage<JoinResponse> {
    private static readonly pb::MessageParser<JoinResponse> _parser = new pb::MessageParser<JoinResponse>(() => new JoinResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gameboard.Script.GbScriptingReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinResponse(JoinResponse other) : this() {
      error_ = other.error_;
      robotNum_ = other.robotNum_;
      variables_ = other.variables_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JoinResponse Clone() {
      return new JoinResponse(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private global::Gameboard.Script.ErrorCode error_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Gameboard.Script.ErrorCode Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "robot_num" field.</summary>
    public const int RobotNumFieldNumber = 2;
    private int robotNum_;
    /// <summary>
    ///  the actual number of robots in the gameboard
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RobotNum {
      get { return robotNum_; }
      set {
        robotNum_ = value;
      }
    }

    /// <summary>Field number for the "variables" field.</summary>
    public const int VariablesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Gameboard.Script.Variable> _repeated_variables_codec
        = pb::FieldCodec.ForMessage(26, global::Gameboard.Script.Variable.Parser);
    private readonly pbc::RepeatedField<global::Gameboard.Script.Variable> variables_ = new pbc::RepeatedField<global::Gameboard.Script.Variable>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Gameboard.Script.Variable> Variables {
      get { return variables_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JoinResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JoinResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Error != other.Error) return false;
      if (RobotNum != other.RobotNum) return false;
      if(!variables_.Equals(other.variables_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Error != 0) hash ^= Error.GetHashCode();
      if (RobotNum != 0) hash ^= RobotNum.GetHashCode();
      hash ^= variables_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Error != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Error);
      }
      if (RobotNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RobotNum);
      }
      variables_.WriteTo(output, _repeated_variables_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Error != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Error);
      }
      if (RobotNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RobotNum);
      }
      size += variables_.CalculateSize(_repeated_variables_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JoinResponse other) {
      if (other == null) {
        return;
      }
      if (other.Error != 0) {
        Error = other.Error;
      }
      if (other.RobotNum != 0) {
        RobotNum = other.RobotNum;
      }
      variables_.Add(other.variables_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            error_ = (global::Gameboard.Script.ErrorCode) input.ReadEnum();
            break;
          }
          case 16: {
            RobotNum = input.ReadInt32();
            break;
          }
          case 26: {
            variables_.AddEntriesFrom(input, _repeated_variables_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateVariableRequest : pb::IMessage<UpdateVariableRequest> {
    private static readonly pb::MessageParser<UpdateVariableRequest> _parser = new pb::MessageParser<UpdateVariableRequest>(() => new UpdateVariableRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateVariableRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gameboard.Script.GbScriptingReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateVariableRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateVariableRequest(UpdateVariableRequest other) : this() {
      name_ = other.name_;
      operation_ = other.operation_;
      value_ = other.value_;
      index_ = other.index_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateVariableRequest Clone() {
      return new UpdateVariableRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "operation" field.</summary>
    public const int OperationFieldNumber = 2;
    private int operation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Operation {
      get { return operation_; }
      set {
        operation_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 4;
    private int index_;
    /// <summary>
    ///  for list insert, remove
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateVariableRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateVariableRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Operation != other.Operation) return false;
      if (Value != other.Value) return false;
      if (Index != other.Index) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Operation != 0) hash ^= Operation.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Operation != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Operation);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Value);
      }
      if (Index != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Operation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Operation);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateVariableRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Operation != 0) {
        Operation = other.Operation;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Operation = input.ReadInt32();
            break;
          }
          case 26: {
            Value = input.ReadString();
            break;
          }
          case 32: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  dummy response for blocking call
  /// </summary>
  public sealed partial class UpdateVariableResponse : pb::IMessage<UpdateVariableResponse> {
    private static readonly pb::MessageParser<UpdateVariableResponse> _parser = new pb::MessageParser<UpdateVariableResponse>(() => new UpdateVariableResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateVariableResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gameboard.Script.GbScriptingReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateVariableResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateVariableResponse(UpdateVariableResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateVariableResponse Clone() {
      return new UpdateVariableResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateVariableResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateVariableResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateVariableResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class PingRequest : pb::IMessage<PingRequest> {
    private static readonly pb::MessageParser<PingRequest> _parser = new pb::MessageParser<PingRequest>(() => new PingRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gameboard.Script.GbScriptingReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingRequest(PingRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingRequest Clone() {
      return new PingRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PingRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class PingResponse : pb::IMessage<PingResponse> {
    private static readonly pb::MessageParser<PingResponse> _parser = new pb::MessageParser<PingResponse>(() => new PingResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PingResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gameboard.Script.GbScriptingReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingResponse(PingResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingResponse Clone() {
      return new PingResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PingResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PingResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PingResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///  TODO: fine-grained update
  /// </summary>
  public sealed partial class VariableUpdate : pb::IMessage<VariableUpdate> {
    private static readonly pb::MessageParser<VariableUpdate> _parser = new pb::MessageParser<VariableUpdate>(() => new VariableUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VariableUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gameboard.Script.GbScriptingReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VariableUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VariableUpdate(VariableUpdate other) : this() {
      name_ = other.name_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VariableUpdate Clone() {
      return new VariableUpdate(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    /// <summary>
    ///  in json
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VariableUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VariableUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VariableUpdate other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VariablesUpdateNotification : pb::IMessage<VariablesUpdateNotification> {
    private static readonly pb::MessageParser<VariablesUpdateNotification> _parser = new pb::MessageParser<VariablesUpdateNotification>(() => new VariablesUpdateNotification());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VariablesUpdateNotification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Gameboard.Script.GbScriptingReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VariablesUpdateNotification() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VariablesUpdateNotification(VariablesUpdateNotification other) : this() {
      updates_ = other.updates_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VariablesUpdateNotification Clone() {
      return new VariablesUpdateNotification(this);
    }

    /// <summary>Field number for the "updates" field.</summary>
    public const int UpdatesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Gameboard.Script.VariableUpdate> _repeated_updates_codec
        = pb::FieldCodec.ForMessage(10, global::Gameboard.Script.VariableUpdate.Parser);
    private readonly pbc::RepeatedField<global::Gameboard.Script.VariableUpdate> updates_ = new pbc::RepeatedField<global::Gameboard.Script.VariableUpdate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Gameboard.Script.VariableUpdate> Updates {
      get { return updates_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VariablesUpdateNotification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VariablesUpdateNotification other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!updates_.Equals(other.updates_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= updates_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      updates_.WriteTo(output, _repeated_updates_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += updates_.CalculateSize(_repeated_updates_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VariablesUpdateNotification other) {
      if (other == null) {
        return;
      }
      updates_.Add(other.updates_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            updates_.AddEntriesFrom(input, _repeated_updates_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
