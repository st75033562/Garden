// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stack.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from stack.proto</summary>
public static partial class StackReflection {

  #region Descriptor
  /// <summary>File descriptor for stack.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static StackReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgtzdGFjay5wcm90byIeCg1TU291bmRNYW5hZ2VyEg0KBWl0ZW1zGAEgAygJ",
          "ImEKDVNhdmVfTm9kZURhdGESDwoHbm9kZV9pZBgBIAEoBRISCgpub2RlX2lu",
          "ZGV4GAIgASgFEhEKCW5vZGVfZGF0YRgDIAEoDBIYChBub2RlX3RlbXBsYXRl",
          "X2lkGAQgASgFIloKEFNhdmVfUGx1Z2luc0RhdGESEQoJcGx1Z2luX2lkGAEg",
          "ASgFEhkKEXBsdWdpbl90ZXh0X3ZhbHVlGAIgASgJEhgKEHBsdWdpbl9pbnRf",
          "dmFsdWUYAyABKAUimQEKEVNhdmVfTm9kZUJhc2VEYXRhEg0KBXBvc194GAEg",
          "ASgCEg0KBXBvc195GAIgASgCEhcKD2xhc3Rfbm9kZV9pbmRleBgDIAEoBRIX",
          "Cg9uZXh0X25vZGVfaW5kZXgYBCABKAUSJgoLcGx1Z2luX2xpc3QYBSADKAsy",
          "ES5TYXZlX1BsdWdpbnNEYXRhEgwKBHR5cGUYBiABKAUiVQoRU2F2ZV9GdW5j",
          "dGlvbk5vZGUSJQoJYmFzZV9kYXRhGAEgASgLMhIuU2F2ZV9Ob2RlQmFzZURh",
          "dGESGQoRcGFyZW50X25vZGVfaW5kZXgYAiABKAUiUwoPU2F2ZV9JbnNlcnRO",
          "b2RlEiUKCWJhc2VfZGF0YRgBIAEoCzISLlNhdmVfTm9kZUJhc2VEYXRhEhkK",
          "EXBhcmVudF9ub2RlX2luZGV4GAIgASgFIjYKDVNhdmVfU2xvdE5vZGUSJQoJ",
          "YmFzZV9kYXRhGAEgASgLMhIuU2F2ZV9Ob2RlQmFzZURhdGEiJwoNU2F2ZV9T",
          "dGVwRGF0YRIWCg5zdGVwX3N1Yl9pbmRleBgBIAEoBSJdCg1TYXZlX1N0ZXBO",
          "b2RlEiUKCWJhc2VfZGF0YRgBIAEoCzISLlNhdmVfTm9kZUJhc2VEYXRhEiUK",
          "DXN0ZXBfc3ViX2RhdGEYAiADKAsyDi5TYXZlX1N0ZXBEYXRhIi8KEVNhdmVf",
          "RnVuY3Rpb25QYXJ0EgwKBHR5cGUYASABKAUSDAoEbmFtZRgCIAEoCSJLChFT",
          "YXZlX0Z1bmN0aW9uRGVjbBITCgtmdW5jdGlvbl9pZBgBIAEoDBIhCgVwYXJ0",
          "cxgCIAMoCzISLlNhdmVfRnVuY3Rpb25QYXJ0IlMKFVNhdmVfRnVuY3Rpb25E",
          "ZWNsTm9kZRIlCgliYXNlX2RhdGEYASABKAsyEi5TYXZlX05vZGVCYXNlRGF0",
          "YRITCgtmdW5jdGlvbl9pZBgDIAEoDCJuChVTYXZlX0Z1bmN0aW9uQ2FsbE5v",
          "ZGUSJQoJYmFzZV9kYXRhGAEgASgLMhIuU2F2ZV9Ob2RlQmFzZURhdGESGQoR",
          "cGFyZW50X25vZGVfaW5kZXgYAiABKAUSEwoLZnVuY3Rpb25faWQYAyABKAwi",
          "bQoUU2F2ZV9GdW5jdGlvbkFyZ05vZGUSJQoJYmFzZV9kYXRhGAEgASgLMhIu",
          "U2F2ZV9Ob2RlQmFzZURhdGESGQoRcGFyZW50X25vZGVfaW5kZXgYAiABKAUS",
          "EwoLZnVuY3Rpb25faWQYAyABKAwikQIKDVNhdmVfVmFyaWFibGUSKQoNdmFy",
          "aWFibGVfdHlwZRgBIAEoDjISLlNhdmVfVmFyaWFibGVUeXBlEhQKDHZhcmlh",
          "YmxlX2tleRgCIAEoCRIUCgx2YXJpYWJsZV92YXIYAyABKAkSFQoNdmFyaWFi",
          "bGVfbGlzdBgEIAMoCRIWCg52YXJpYWJsZV9zdGFjaxgFIAMoCRIWCg52YXJp",
          "YWJsZV9xdWV1ZRgGIAMoCRIyChRvbGRfZ2xvYmFsX3Zhcl9vd25lchgHIAEo",
          "DjIULlNhdmVfR2xvYmFsVmFyT3duZXISLgoQZ2xvYmFsX3Zhcl9vd25lchgI",
          "IAEoDjIULlNhdmVfR2xvYmFsVmFyT3duZXIiLgoVU2F2ZV9NZXNzYWdlRXh0",
          "cmFEYXRhEhUKDXJvYm90X2luZGljZXMYASADKAUiJAoMU2F2ZV9WZWN0b3Iy",
          "EgkKAXgYASABKAISCQoBeRgCIAEoAiLoBgoQU2F2ZV9Qcm9qZWN0RGF0YRIT",
          "Cgtzb3VuZF9zdGF0ZRgBIAEoCBIRCglzdG9wX21vZGUYAiABKAUSEwoLYmxv",
          "Y2tfbGV2ZWwYAyABKAUSEgoKbm9kZV9pbmRleBgEIAEoBRITCgtwYW5lbF9z",
          "Y2FsZRgFIAEoAhITCgtwYW5lbF9wb3NfeBgGIAEoAhITCgtwYW5lbF9wb3Nf",
          "eRgHIAEoAhITCgtwYW5lbF9wb3NfehgIIAEoAhIhCglub2RlX2xpc3QYCSAD",
          "KAsyDi5TYXZlX05vZGVEYXRhEicKD2xvY2FsX3ZhcmlhYmxlcxgKIAMoCzIO",
          "LlNhdmVfVmFyaWFibGUSFgoObG9jYWxfbWVzc2FnZXMYCyADKAkSKAoQZ2xv",
          "YmFsX3ZhcmlhYmxlcxgMIAMoCzIOLlNhdmVfVmFyaWFibGUSFwoPZ2xvYmFs",
          "X21lc3NhZ2VzGA0gAygJEjgKGGxvY2FsX21lc3NhZ2VfZXh0cmFfZGF0YRgO",
          "IAMoCzIWLlNhdmVfTWVzc2FnZUV4dHJhRGF0YRI5ChlnbG9iYWxfbWVzc2Fn",
          "ZV9leHRyYV9kYXRhGA8gAygLMhYuU2F2ZV9NZXNzYWdlRXh0cmFEYXRhEiAK",
          "CXBhbmVsX3BvcxgQIAEoCzINLlNhdmVfVmVjdG9yMhImCgpmdW5jX2RlY2xz",
          "GBEgAygLMhIuU2F2ZV9GdW5jdGlvbkRlY2wSNAoKZGVjbF9ub2RlcxgSIAMo",
          "CzIgLlNhdmVfUHJvamVjdERhdGEuRGVjbE5vZGVzRW50cnkSNAoKY2FsbF9u",
          "b2RlcxgTIAMoCzIgLlNhdmVfUHJvamVjdERhdGEuQ2FsbE5vZGVzRW50cnkS",
          "QQoRY2FsbF9yZXR1cm5fbm9kZXMYFCADKAsyJi5TYXZlX1Byb2plY3REYXRh",
          "LkNhbGxSZXR1cm5Ob2Rlc0VudHJ5GjAKDkRlY2xOb2Rlc0VudHJ5EgsKA2tl",
          "eRgBIAEoBRINCgV2YWx1ZRgCIAEoBToCOAEaMAoOQ2FsbE5vZGVzRW50cnkS",
          "CwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4ARo2ChRDYWxsUmV0dXJu",
          "Tm9kZXNFbnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiABKAU6AjgBIn4K",
          "FVNhdmVfTGVhdmVNZXNzYWdlTm9kZRIPCgd1c2VyX2lkGAEgASgNEhEKCXVz",
          "ZXJfbmFtZRgCIAEoCRIQCghtc2dfdHlwZRgDIAEoBRIWCg50ZXh0X3R5cGVf",
          "ZGF0YRgEIAEoCRIXCg92b2ljZV90eXBlX2RhdGEYBSABKA0iVwoVU2F2ZV9M",
          "ZWF2ZU1lc3NhZ2VEYXRhEg8KB21zZ19rZXkYASABKAkSLQoNbXNnX25vZGVf",
          "bGlzdBgCIAMoCzIWLlNhdmVfTGVhdmVNZXNzYWdlTm9kZSJFChlTYXZlX0xl",
          "YXZlTWVzc2FnZURhdGFfQWxsEigKCG1zZ19saXN0GAEgAygLMhYuU2F2ZV9M",
          "ZWF2ZU1lc3NhZ2VEYXRhIi8KDFNhdmVfVmVjdG9yMxIJCgF4GAEgASgCEgkK",
          "AXkYAiABKAISCQoBehgDIAEoAiKnAQoUU2F2ZV9HYW1lYm9hcmRPYmplY3QS",
          "DAoEbmFtZRgBIAEoCRIQCghhc3NldF9pZBgCIAEoBRIfCghwb3NpdGlvbhgD",
          "IAEoCzINLlNhdmVfVmVjdG9yMxIPCgdvbGRfcm90GAQgASgCEhwKBXNjYWxl",
          "GAUgASgLMg0uU2F2ZV9WZWN0b3IzEh8KCHJvdGF0aW9uGAYgASgLMg0uU2F2",
          "ZV9WZWN0b3IzIkoKHVNhdmVfR2FtZWJvYXJkT2JqZWN0QXNzZXRJbmZvEhAK",
          "CGFzc2V0X2lkGAEgASgFEhcKD25leHRfb2JqZWN0X251bRgCIAEoBSJ4ChNT",
          "YXZlX0dhbWVib2FyZFJvYm90EgkKAXgYASABKAISCQoBeRgCIAEoAhIQCghy",
          "b3RhdGlvbhgDIAEoAhIQCghjb2xvcl9pZBgEIAEoBRIJCgF6GAUgASgCEhwK",
          "BXNjYWxlGAYgASgLMg0uU2F2ZV9WZWN0b3IzIlwKF1NhdmVfR2FtZWJvYXJk",
          "Q29kZUdyb3VwEhQKDHByb2plY3RfcGF0aBgBIAEoCRIVCg1yb2JvdF9pbmRp",
          "Y2VzGAIgAygFEhQKDHByb2plY3RfbmFtZRgDIAEoCSK9AgoOU2F2ZV9HYW1l",
          "Ym9hcmQSDwoHdmVyc2lvbhgBIAEoBRIQCgh0aGVtZV9pZBgCIAEoBRIdChVz",
          "b3VyY2VfY29kZV9hdmFpbGFibGUYAyABKAgSJAoGcm9ib3RzGAQgAygLMhQu",
          "U2F2ZV9HYW1lYm9hcmRSb2JvdBIyChB2aXN1YWxDb2RlR3JvdXBzGAUgAygL",
          "MhguU2F2ZV9HYW1lYm9hcmRDb2RlR3JvdXASMgoQcHl0aG9uQ29kZUdyb3Vw",
          "cxgGIAMoCzIYLlNhdmVfR2FtZWJvYXJkQ29kZUdyb3VwEiYKB29iamVjdHMY",
          "ByADKAsyFS5TYXZlX0dhbWVib2FyZE9iamVjdBIzCgthc3NldHNfaW5mbxgI",
          "IAMoCzIeLlNhdmVfR2FtZWJvYXJkT2JqZWN0QXNzZXRJbmZvIlsKEFNhdmVf",
          "Q29kZVNlc3Npb24SGQoRd29ya2luZ19kaXJlY3RvcnkYASABKAkSDAoEbmFt",
          "ZRgCIAEoCRIMCgRjb2RlGAMgASgMEhAKCG1lc3NhZ2VzGAQgASgMKlUKEVNh",
          "dmVfVmFyaWFibGVUeXBlEhEKDVZhcmlhYmVsX1R5cGUQABINCglMaXN0X1R5",
          "cGUQARIOCgpTdGFja19UeXBlEAISDgoKUXVldWVfVHlwZRADKk4KE1NhdmVf",
          "R2xvYmFsVmFyT3duZXISDQoJR2FtZWJvYXJkEAASCQoFUm9ib3QQARIHCgNB",
          "bGwQAhIUCgdJbnZhbGlkEP///////////wFiBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Save_VariableType), typeof(global::Save_GlobalVarOwner), }, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::SSoundManager), global::SSoundManager.Parser, new[]{ "Items" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Save_NodeData), global::Save_NodeData.Parser, new[]{ "NodeId", "NodeIndex", "NodeData", "NodeTemplateId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Save_PluginsData), global::Save_PluginsData.Parser, new[]{ "PluginId", "PluginTextValue", "PluginIntValue" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Save_NodeBaseData), global::Save_NodeBaseData.Parser, new[]{ "PosX", "PosY", "LastNodeIndex", "NextNodeIndex", "PluginList", "Type" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Save_FunctionNode), global::Save_FunctionNode.Parser, new[]{ "BaseData", "ParentNodeIndex" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Save_InsertNode), global::Save_InsertNode.Parser, new[]{ "BaseData", "ParentNodeIndex" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Save_SlotNode), global::Save_SlotNode.Parser, new[]{ "BaseData" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Save_StepData), global::Save_StepData.Parser, new[]{ "StepSubIndex" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Save_StepNode), global::Save_StepNode.Parser, new[]{ "BaseData", "StepSubData" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Save_FunctionPart), global::Save_FunctionPart.Parser, new[]{ "Type", "Name" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Save_FunctionDecl), global::Save_FunctionDecl.Parser, new[]{ "FunctionId", "Parts" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Save_FunctionDeclNode), global::Save_FunctionDeclNode.Parser, new[]{ "BaseData", "FunctionId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Save_FunctionCallNode), global::Save_FunctionCallNode.Parser, new[]{ "BaseData", "ParentNodeIndex", "FunctionId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Save_FunctionArgNode), global::Save_FunctionArgNode.Parser, new[]{ "BaseData", "ParentNodeIndex", "FunctionId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Save_Variable), global::Save_Variable.Parser, new[]{ "VariableType", "VariableKey", "VariableVar", "VariableList", "VariableStack", "VariableQueue", "OldGlobalVarOwner", "GlobalVarOwner" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Save_MessageExtraData), global::Save_MessageExtraData.Parser, new[]{ "RobotIndices" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Save_Vector2), global::Save_Vector2.Parser, new[]{ "X", "Y" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Save_ProjectData), global::Save_ProjectData.Parser, new[]{ "SoundState", "StopMode", "BlockLevel", "NodeIndex", "PanelScale", "PanelPosX", "PanelPosY", "PanelPosZ", "NodeList", "LocalVariables", "LocalMessages", "GlobalVariables", "GlobalMessages", "LocalMessageExtraData", "GlobalMessageExtraData", "PanelPos", "FuncDecls", "DeclNodes", "CallNodes", "CallReturnNodes" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, }),
          new pbr::GeneratedClrTypeInfo(typeof(global::Save_LeaveMessageNode), global::Save_LeaveMessageNode.Parser, new[]{ "UserId", "UserName", "MsgType", "TextTypeData", "VoiceTypeData" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Save_LeaveMessageData), global::Save_LeaveMessageData.Parser, new[]{ "MsgKey", "MsgNodeList" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Save_LeaveMessageData_All), global::Save_LeaveMessageData_All.Parser, new[]{ "MsgList" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Save_Vector3), global::Save_Vector3.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Save_GameboardObject), global::Save_GameboardObject.Parser, new[]{ "Name", "AssetId", "Position", "OldRot", "Scale", "Rotation" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Save_GameboardObjectAssetInfo), global::Save_GameboardObjectAssetInfo.Parser, new[]{ "AssetId", "NextObjectNum" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Save_GameboardRobot), global::Save_GameboardRobot.Parser, new[]{ "X", "Y", "Rotation", "ColorId", "Z", "Scale" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Save_GameboardCodeGroup), global::Save_GameboardCodeGroup.Parser, new[]{ "ProjectPath", "RobotIndices", "ProjectName" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Save_Gameboard), global::Save_Gameboard.Parser, new[]{ "Version", "ThemeId", "SourceCodeAvailable", "Robots", "VisualCodeGroups", "PythonCodeGroups", "Objects", "AssetsInfo" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Save_CodeSession), global::Save_CodeSession.Parser, new[]{ "WorkingDirectory", "Name", "Code", "Messages" }, null, null, null)
        }));
  }
  #endregion

}
#region Enums
public enum Save_VariableType {
  [pbr::OriginalName("Variabel_Type")] VariabelType = 0,
  [pbr::OriginalName("List_Type")] ListType = 1,
  [pbr::OriginalName("Stack_Type")] StackType = 2,
  [pbr::OriginalName("Queue_Type")] QueueType = 3,
}

public enum Save_GlobalVarOwner {
  [pbr::OriginalName("Gameboard")] Gameboard = 0,
  [pbr::OriginalName("Robot")] Robot = 1,
  [pbr::OriginalName("All")] All = 2,
  [pbr::OriginalName("Invalid")] Invalid = -1,
}

#endregion

#region Messages
public sealed partial class SSoundManager : pb::IMessage<SSoundManager> {
  private static readonly pb::MessageParser<SSoundManager> _parser = new pb::MessageParser<SSoundManager>(() => new SSoundManager());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SSoundManager> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StackReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SSoundManager() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SSoundManager(SSoundManager other) : this() {
    items_ = other.items_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SSoundManager Clone() {
    return new SSoundManager(this);
  }

  /// <summary>Field number for the "items" field.</summary>
  public const int ItemsFieldNumber = 1;
  private static readonly pb::FieldCodec<string> _repeated_items_codec
      = pb::FieldCodec.ForString(10);
  private readonly pbc::RepeatedField<string> items_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> Items {
    get { return items_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SSoundManager);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SSoundManager other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!items_.Equals(other.items_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= items_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    items_.WriteTo(output, _repeated_items_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += items_.CalculateSize(_repeated_items_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SSoundManager other) {
    if (other == null) {
      return;
    }
    items_.Add(other.items_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          items_.AddEntriesFrom(input, _repeated_items_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class Save_NodeData : pb::IMessage<Save_NodeData> {
  private static readonly pb::MessageParser<Save_NodeData> _parser = new pb::MessageParser<Save_NodeData>(() => new Save_NodeData());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Save_NodeData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StackReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_NodeData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_NodeData(Save_NodeData other) : this() {
    nodeId_ = other.nodeId_;
    nodeIndex_ = other.nodeIndex_;
    nodeData_ = other.nodeData_;
    nodeTemplateId_ = other.nodeTemplateId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_NodeData Clone() {
    return new Save_NodeData(this);
  }

  /// <summary>Field number for the "node_id" field.</summary>
  public const int NodeIdFieldNumber = 1;
  private int nodeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NodeId {
    get { return nodeId_; }
    set {
      nodeId_ = value;
    }
  }

  /// <summary>Field number for the "node_index" field.</summary>
  public const int NodeIndexFieldNumber = 2;
  private int nodeIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NodeIndex {
    get { return nodeIndex_; }
    set {
      nodeIndex_ = value;
    }
  }

  /// <summary>Field number for the "node_data" field.</summary>
  public const int NodeDataFieldNumber = 3;
  private pb::ByteString nodeData_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString NodeData {
    get { return nodeData_; }
    set {
      nodeData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "node_template_id" field.</summary>
  public const int NodeTemplateIdFieldNumber = 4;
  private int nodeTemplateId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NodeTemplateId {
    get { return nodeTemplateId_; }
    set {
      nodeTemplateId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Save_NodeData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Save_NodeData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (NodeId != other.NodeId) return false;
    if (NodeIndex != other.NodeIndex) return false;
    if (NodeData != other.NodeData) return false;
    if (NodeTemplateId != other.NodeTemplateId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (NodeId != 0) hash ^= NodeId.GetHashCode();
    if (NodeIndex != 0) hash ^= NodeIndex.GetHashCode();
    if (NodeData.Length != 0) hash ^= NodeData.GetHashCode();
    if (NodeTemplateId != 0) hash ^= NodeTemplateId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (NodeId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(NodeId);
    }
    if (NodeIndex != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(NodeIndex);
    }
    if (NodeData.Length != 0) {
      output.WriteRawTag(26);
      output.WriteBytes(NodeData);
    }
    if (NodeTemplateId != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(NodeTemplateId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (NodeId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NodeId);
    }
    if (NodeIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NodeIndex);
    }
    if (NodeData.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(NodeData);
    }
    if (NodeTemplateId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NodeTemplateId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Save_NodeData other) {
    if (other == null) {
      return;
    }
    if (other.NodeId != 0) {
      NodeId = other.NodeId;
    }
    if (other.NodeIndex != 0) {
      NodeIndex = other.NodeIndex;
    }
    if (other.NodeData.Length != 0) {
      NodeData = other.NodeData;
    }
    if (other.NodeTemplateId != 0) {
      NodeTemplateId = other.NodeTemplateId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          NodeId = input.ReadInt32();
          break;
        }
        case 16: {
          NodeIndex = input.ReadInt32();
          break;
        }
        case 26: {
          NodeData = input.ReadBytes();
          break;
        }
        case 32: {
          NodeTemplateId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class Save_PluginsData : pb::IMessage<Save_PluginsData> {
  private static readonly pb::MessageParser<Save_PluginsData> _parser = new pb::MessageParser<Save_PluginsData>(() => new Save_PluginsData());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Save_PluginsData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StackReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_PluginsData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_PluginsData(Save_PluginsData other) : this() {
    pluginId_ = other.pluginId_;
    pluginTextValue_ = other.pluginTextValue_;
    pluginIntValue_ = other.pluginIntValue_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_PluginsData Clone() {
    return new Save_PluginsData(this);
  }

  /// <summary>Field number for the "plugin_id" field.</summary>
  public const int PluginIdFieldNumber = 1;
  private int pluginId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PluginId {
    get { return pluginId_; }
    set {
      pluginId_ = value;
    }
  }

  /// <summary>Field number for the "plugin_text_value" field.</summary>
  public const int PluginTextValueFieldNumber = 2;
  private string pluginTextValue_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PluginTextValue {
    get { return pluginTextValue_; }
    set {
      pluginTextValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "plugin_int_value" field.</summary>
  public const int PluginIntValueFieldNumber = 3;
  private int pluginIntValue_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PluginIntValue {
    get { return pluginIntValue_; }
    set {
      pluginIntValue_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Save_PluginsData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Save_PluginsData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PluginId != other.PluginId) return false;
    if (PluginTextValue != other.PluginTextValue) return false;
    if (PluginIntValue != other.PluginIntValue) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PluginId != 0) hash ^= PluginId.GetHashCode();
    if (PluginTextValue.Length != 0) hash ^= PluginTextValue.GetHashCode();
    if (PluginIntValue != 0) hash ^= PluginIntValue.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PluginId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(PluginId);
    }
    if (PluginTextValue.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(PluginTextValue);
    }
    if (PluginIntValue != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(PluginIntValue);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PluginId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PluginId);
    }
    if (PluginTextValue.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PluginTextValue);
    }
    if (PluginIntValue != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PluginIntValue);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Save_PluginsData other) {
    if (other == null) {
      return;
    }
    if (other.PluginId != 0) {
      PluginId = other.PluginId;
    }
    if (other.PluginTextValue.Length != 0) {
      PluginTextValue = other.PluginTextValue;
    }
    if (other.PluginIntValue != 0) {
      PluginIntValue = other.PluginIntValue;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          PluginId = input.ReadInt32();
          break;
        }
        case 18: {
          PluginTextValue = input.ReadString();
          break;
        }
        case 24: {
          PluginIntValue = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class Save_NodeBaseData : pb::IMessage<Save_NodeBaseData> {
  private static readonly pb::MessageParser<Save_NodeBaseData> _parser = new pb::MessageParser<Save_NodeBaseData>(() => new Save_NodeBaseData());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Save_NodeBaseData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StackReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_NodeBaseData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_NodeBaseData(Save_NodeBaseData other) : this() {
    posX_ = other.posX_;
    posY_ = other.posY_;
    lastNodeIndex_ = other.lastNodeIndex_;
    nextNodeIndex_ = other.nextNodeIndex_;
    pluginList_ = other.pluginList_.Clone();
    type_ = other.type_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_NodeBaseData Clone() {
    return new Save_NodeBaseData(this);
  }

  /// <summary>Field number for the "pos_x" field.</summary>
  public const int PosXFieldNumber = 1;
  private float posX_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float PosX {
    get { return posX_; }
    set {
      posX_ = value;
    }
  }

  /// <summary>Field number for the "pos_y" field.</summary>
  public const int PosYFieldNumber = 2;
  private float posY_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float PosY {
    get { return posY_; }
    set {
      posY_ = value;
    }
  }

  /// <summary>Field number for the "last_node_index" field.</summary>
  public const int LastNodeIndexFieldNumber = 3;
  private int lastNodeIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LastNodeIndex {
    get { return lastNodeIndex_; }
    set {
      lastNodeIndex_ = value;
    }
  }

  /// <summary>Field number for the "next_node_index" field.</summary>
  public const int NextNodeIndexFieldNumber = 4;
  private int nextNodeIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NextNodeIndex {
    get { return nextNodeIndex_; }
    set {
      nextNodeIndex_ = value;
    }
  }

  /// <summary>Field number for the "plugin_list" field.</summary>
  public const int PluginListFieldNumber = 5;
  private static readonly pb::FieldCodec<global::Save_PluginsData> _repeated_pluginList_codec
      = pb::FieldCodec.ForMessage(42, global::Save_PluginsData.Parser);
  private readonly pbc::RepeatedField<global::Save_PluginsData> pluginList_ = new pbc::RepeatedField<global::Save_PluginsData>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Save_PluginsData> PluginList {
    get { return pluginList_; }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 6;
  private int type_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Save_NodeBaseData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Save_NodeBaseData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PosX != other.PosX) return false;
    if (PosY != other.PosY) return false;
    if (LastNodeIndex != other.LastNodeIndex) return false;
    if (NextNodeIndex != other.NextNodeIndex) return false;
    if(!pluginList_.Equals(other.pluginList_)) return false;
    if (Type != other.Type) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PosX != 0F) hash ^= PosX.GetHashCode();
    if (PosY != 0F) hash ^= PosY.GetHashCode();
    if (LastNodeIndex != 0) hash ^= LastNodeIndex.GetHashCode();
    if (NextNodeIndex != 0) hash ^= NextNodeIndex.GetHashCode();
    hash ^= pluginList_.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PosX != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(PosX);
    }
    if (PosY != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(PosY);
    }
    if (LastNodeIndex != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(LastNodeIndex);
    }
    if (NextNodeIndex != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(NextNodeIndex);
    }
    pluginList_.WriteTo(output, _repeated_pluginList_codec);
    if (Type != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Type);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PosX != 0F) {
      size += 1 + 4;
    }
    if (PosY != 0F) {
      size += 1 + 4;
    }
    if (LastNodeIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastNodeIndex);
    }
    if (NextNodeIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextNodeIndex);
    }
    size += pluginList_.CalculateSize(_repeated_pluginList_codec);
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Save_NodeBaseData other) {
    if (other == null) {
      return;
    }
    if (other.PosX != 0F) {
      PosX = other.PosX;
    }
    if (other.PosY != 0F) {
      PosY = other.PosY;
    }
    if (other.LastNodeIndex != 0) {
      LastNodeIndex = other.LastNodeIndex;
    }
    if (other.NextNodeIndex != 0) {
      NextNodeIndex = other.NextNodeIndex;
    }
    pluginList_.Add(other.pluginList_);
    if (other.Type != 0) {
      Type = other.Type;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 13: {
          PosX = input.ReadFloat();
          break;
        }
        case 21: {
          PosY = input.ReadFloat();
          break;
        }
        case 24: {
          LastNodeIndex = input.ReadInt32();
          break;
        }
        case 32: {
          NextNodeIndex = input.ReadInt32();
          break;
        }
        case 42: {
          pluginList_.AddEntriesFrom(input, _repeated_pluginList_codec);
          break;
        }
        case 48: {
          Type = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class Save_FunctionNode : pb::IMessage<Save_FunctionNode> {
  private static readonly pb::MessageParser<Save_FunctionNode> _parser = new pb::MessageParser<Save_FunctionNode>(() => new Save_FunctionNode());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Save_FunctionNode> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StackReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_FunctionNode() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_FunctionNode(Save_FunctionNode other) : this() {
    BaseData = other.baseData_ != null ? other.BaseData.Clone() : null;
    parentNodeIndex_ = other.parentNodeIndex_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_FunctionNode Clone() {
    return new Save_FunctionNode(this);
  }

  /// <summary>Field number for the "base_data" field.</summary>
  public const int BaseDataFieldNumber = 1;
  private global::Save_NodeBaseData baseData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Save_NodeBaseData BaseData {
    get { return baseData_; }
    set {
      baseData_ = value;
    }
  }

  /// <summary>Field number for the "parent_node_index" field.</summary>
  public const int ParentNodeIndexFieldNumber = 2;
  private int parentNodeIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ParentNodeIndex {
    get { return parentNodeIndex_; }
    set {
      parentNodeIndex_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Save_FunctionNode);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Save_FunctionNode other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(BaseData, other.BaseData)) return false;
    if (ParentNodeIndex != other.ParentNodeIndex) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (baseData_ != null) hash ^= BaseData.GetHashCode();
    if (ParentNodeIndex != 0) hash ^= ParentNodeIndex.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (baseData_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(BaseData);
    }
    if (ParentNodeIndex != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ParentNodeIndex);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (baseData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseData);
    }
    if (ParentNodeIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParentNodeIndex);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Save_FunctionNode other) {
    if (other == null) {
      return;
    }
    if (other.baseData_ != null) {
      if (baseData_ == null) {
        baseData_ = new global::Save_NodeBaseData();
      }
      BaseData.MergeFrom(other.BaseData);
    }
    if (other.ParentNodeIndex != 0) {
      ParentNodeIndex = other.ParentNodeIndex;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (baseData_ == null) {
            baseData_ = new global::Save_NodeBaseData();
          }
          input.ReadMessage(baseData_);
          break;
        }
        case 16: {
          ParentNodeIndex = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class Save_InsertNode : pb::IMessage<Save_InsertNode> {
  private static readonly pb::MessageParser<Save_InsertNode> _parser = new pb::MessageParser<Save_InsertNode>(() => new Save_InsertNode());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Save_InsertNode> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StackReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_InsertNode() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_InsertNode(Save_InsertNode other) : this() {
    BaseData = other.baseData_ != null ? other.BaseData.Clone() : null;
    parentNodeIndex_ = other.parentNodeIndex_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_InsertNode Clone() {
    return new Save_InsertNode(this);
  }

  /// <summary>Field number for the "base_data" field.</summary>
  public const int BaseDataFieldNumber = 1;
  private global::Save_NodeBaseData baseData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Save_NodeBaseData BaseData {
    get { return baseData_; }
    set {
      baseData_ = value;
    }
  }

  /// <summary>Field number for the "parent_node_index" field.</summary>
  public const int ParentNodeIndexFieldNumber = 2;
  private int parentNodeIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ParentNodeIndex {
    get { return parentNodeIndex_; }
    set {
      parentNodeIndex_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Save_InsertNode);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Save_InsertNode other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(BaseData, other.BaseData)) return false;
    if (ParentNodeIndex != other.ParentNodeIndex) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (baseData_ != null) hash ^= BaseData.GetHashCode();
    if (ParentNodeIndex != 0) hash ^= ParentNodeIndex.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (baseData_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(BaseData);
    }
    if (ParentNodeIndex != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ParentNodeIndex);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (baseData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseData);
    }
    if (ParentNodeIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParentNodeIndex);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Save_InsertNode other) {
    if (other == null) {
      return;
    }
    if (other.baseData_ != null) {
      if (baseData_ == null) {
        baseData_ = new global::Save_NodeBaseData();
      }
      BaseData.MergeFrom(other.BaseData);
    }
    if (other.ParentNodeIndex != 0) {
      ParentNodeIndex = other.ParentNodeIndex;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (baseData_ == null) {
            baseData_ = new global::Save_NodeBaseData();
          }
          input.ReadMessage(baseData_);
          break;
        }
        case 16: {
          ParentNodeIndex = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class Save_SlotNode : pb::IMessage<Save_SlotNode> {
  private static readonly pb::MessageParser<Save_SlotNode> _parser = new pb::MessageParser<Save_SlotNode>(() => new Save_SlotNode());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Save_SlotNode> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StackReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_SlotNode() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_SlotNode(Save_SlotNode other) : this() {
    BaseData = other.baseData_ != null ? other.BaseData.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_SlotNode Clone() {
    return new Save_SlotNode(this);
  }

  /// <summary>Field number for the "base_data" field.</summary>
  public const int BaseDataFieldNumber = 1;
  private global::Save_NodeBaseData baseData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Save_NodeBaseData BaseData {
    get { return baseData_; }
    set {
      baseData_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Save_SlotNode);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Save_SlotNode other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(BaseData, other.BaseData)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (baseData_ != null) hash ^= BaseData.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (baseData_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(BaseData);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (baseData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseData);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Save_SlotNode other) {
    if (other == null) {
      return;
    }
    if (other.baseData_ != null) {
      if (baseData_ == null) {
        baseData_ = new global::Save_NodeBaseData();
      }
      BaseData.MergeFrom(other.BaseData);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (baseData_ == null) {
            baseData_ = new global::Save_NodeBaseData();
          }
          input.ReadMessage(baseData_);
          break;
        }
      }
    }
  }

}

public sealed partial class Save_StepData : pb::IMessage<Save_StepData> {
  private static readonly pb::MessageParser<Save_StepData> _parser = new pb::MessageParser<Save_StepData>(() => new Save_StepData());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Save_StepData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StackReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_StepData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_StepData(Save_StepData other) : this() {
    stepSubIndex_ = other.stepSubIndex_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_StepData Clone() {
    return new Save_StepData(this);
  }

  /// <summary>Field number for the "step_sub_index" field.</summary>
  public const int StepSubIndexFieldNumber = 1;
  private int stepSubIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int StepSubIndex {
    get { return stepSubIndex_; }
    set {
      stepSubIndex_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Save_StepData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Save_StepData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (StepSubIndex != other.StepSubIndex) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (StepSubIndex != 0) hash ^= StepSubIndex.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (StepSubIndex != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(StepSubIndex);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (StepSubIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(StepSubIndex);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Save_StepData other) {
    if (other == null) {
      return;
    }
    if (other.StepSubIndex != 0) {
      StepSubIndex = other.StepSubIndex;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          StepSubIndex = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class Save_StepNode : pb::IMessage<Save_StepNode> {
  private static readonly pb::MessageParser<Save_StepNode> _parser = new pb::MessageParser<Save_StepNode>(() => new Save_StepNode());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Save_StepNode> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StackReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_StepNode() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_StepNode(Save_StepNode other) : this() {
    BaseData = other.baseData_ != null ? other.BaseData.Clone() : null;
    stepSubData_ = other.stepSubData_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_StepNode Clone() {
    return new Save_StepNode(this);
  }

  /// <summary>Field number for the "base_data" field.</summary>
  public const int BaseDataFieldNumber = 1;
  private global::Save_NodeBaseData baseData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Save_NodeBaseData BaseData {
    get { return baseData_; }
    set {
      baseData_ = value;
    }
  }

  /// <summary>Field number for the "step_sub_data" field.</summary>
  public const int StepSubDataFieldNumber = 2;
  private static readonly pb::FieldCodec<global::Save_StepData> _repeated_stepSubData_codec
      = pb::FieldCodec.ForMessage(18, global::Save_StepData.Parser);
  private readonly pbc::RepeatedField<global::Save_StepData> stepSubData_ = new pbc::RepeatedField<global::Save_StepData>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Save_StepData> StepSubData {
    get { return stepSubData_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Save_StepNode);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Save_StepNode other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(BaseData, other.BaseData)) return false;
    if(!stepSubData_.Equals(other.stepSubData_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (baseData_ != null) hash ^= BaseData.GetHashCode();
    hash ^= stepSubData_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (baseData_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(BaseData);
    }
    stepSubData_.WriteTo(output, _repeated_stepSubData_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (baseData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseData);
    }
    size += stepSubData_.CalculateSize(_repeated_stepSubData_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Save_StepNode other) {
    if (other == null) {
      return;
    }
    if (other.baseData_ != null) {
      if (baseData_ == null) {
        baseData_ = new global::Save_NodeBaseData();
      }
      BaseData.MergeFrom(other.BaseData);
    }
    stepSubData_.Add(other.stepSubData_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (baseData_ == null) {
            baseData_ = new global::Save_NodeBaseData();
          }
          input.ReadMessage(baseData_);
          break;
        }
        case 18: {
          stepSubData_.AddEntriesFrom(input, _repeated_stepSubData_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class Save_FunctionPart : pb::IMessage<Save_FunctionPart> {
  private static readonly pb::MessageParser<Save_FunctionPart> _parser = new pb::MessageParser<Save_FunctionPart>(() => new Save_FunctionPart());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Save_FunctionPart> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StackReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_FunctionPart() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_FunctionPart(Save_FunctionPart other) : this() {
    type_ = other.type_;
    name_ = other.name_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_FunctionPart Clone() {
    return new Save_FunctionPart(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private int type_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Save_FunctionPart);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Save_FunctionPart other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (Name != other.Name) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Type);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Save_FunctionPart other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Type = input.ReadInt32();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class Save_FunctionDecl : pb::IMessage<Save_FunctionDecl> {
  private static readonly pb::MessageParser<Save_FunctionDecl> _parser = new pb::MessageParser<Save_FunctionDecl>(() => new Save_FunctionDecl());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Save_FunctionDecl> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StackReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_FunctionDecl() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_FunctionDecl(Save_FunctionDecl other) : this() {
    functionId_ = other.functionId_;
    parts_ = other.parts_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_FunctionDecl Clone() {
    return new Save_FunctionDecl(this);
  }

  /// <summary>Field number for the "function_id" field.</summary>
  public const int FunctionIdFieldNumber = 1;
  private pb::ByteString functionId_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString FunctionId {
    get { return functionId_; }
    set {
      functionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "parts" field.</summary>
  public const int PartsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::Save_FunctionPart> _repeated_parts_codec
      = pb::FieldCodec.ForMessage(18, global::Save_FunctionPart.Parser);
  private readonly pbc::RepeatedField<global::Save_FunctionPart> parts_ = new pbc::RepeatedField<global::Save_FunctionPart>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Save_FunctionPart> Parts {
    get { return parts_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Save_FunctionDecl);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Save_FunctionDecl other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FunctionId != other.FunctionId) return false;
    if(!parts_.Equals(other.parts_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (FunctionId.Length != 0) hash ^= FunctionId.GetHashCode();
    hash ^= parts_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (FunctionId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(FunctionId);
    }
    parts_.WriteTo(output, _repeated_parts_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (FunctionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(FunctionId);
    }
    size += parts_.CalculateSize(_repeated_parts_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Save_FunctionDecl other) {
    if (other == null) {
      return;
    }
    if (other.FunctionId.Length != 0) {
      FunctionId = other.FunctionId;
    }
    parts_.Add(other.parts_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          FunctionId = input.ReadBytes();
          break;
        }
        case 18: {
          parts_.AddEntriesFrom(input, _repeated_parts_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///  NOTE: 2 is reserved to save the parent node index if the node is insertable
/// </summary>
public sealed partial class Save_FunctionDeclNode : pb::IMessage<Save_FunctionDeclNode> {
  private static readonly pb::MessageParser<Save_FunctionDeclNode> _parser = new pb::MessageParser<Save_FunctionDeclNode>(() => new Save_FunctionDeclNode());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Save_FunctionDeclNode> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StackReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_FunctionDeclNode() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_FunctionDeclNode(Save_FunctionDeclNode other) : this() {
    BaseData = other.baseData_ != null ? other.BaseData.Clone() : null;
    functionId_ = other.functionId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_FunctionDeclNode Clone() {
    return new Save_FunctionDeclNode(this);
  }

  /// <summary>Field number for the "base_data" field.</summary>
  public const int BaseDataFieldNumber = 1;
  private global::Save_NodeBaseData baseData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Save_NodeBaseData BaseData {
    get { return baseData_; }
    set {
      baseData_ = value;
    }
  }

  /// <summary>Field number for the "function_id" field.</summary>
  public const int FunctionIdFieldNumber = 3;
  private pb::ByteString functionId_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString FunctionId {
    get { return functionId_; }
    set {
      functionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Save_FunctionDeclNode);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Save_FunctionDeclNode other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(BaseData, other.BaseData)) return false;
    if (FunctionId != other.FunctionId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (baseData_ != null) hash ^= BaseData.GetHashCode();
    if (FunctionId.Length != 0) hash ^= FunctionId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (baseData_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(BaseData);
    }
    if (FunctionId.Length != 0) {
      output.WriteRawTag(26);
      output.WriteBytes(FunctionId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (baseData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseData);
    }
    if (FunctionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(FunctionId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Save_FunctionDeclNode other) {
    if (other == null) {
      return;
    }
    if (other.baseData_ != null) {
      if (baseData_ == null) {
        baseData_ = new global::Save_NodeBaseData();
      }
      BaseData.MergeFrom(other.BaseData);
    }
    if (other.FunctionId.Length != 0) {
      FunctionId = other.FunctionId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (baseData_ == null) {
            baseData_ = new global::Save_NodeBaseData();
          }
          input.ReadMessage(baseData_);
          break;
        }
        case 26: {
          FunctionId = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class Save_FunctionCallNode : pb::IMessage<Save_FunctionCallNode> {
  private static readonly pb::MessageParser<Save_FunctionCallNode> _parser = new pb::MessageParser<Save_FunctionCallNode>(() => new Save_FunctionCallNode());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Save_FunctionCallNode> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StackReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_FunctionCallNode() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_FunctionCallNode(Save_FunctionCallNode other) : this() {
    BaseData = other.baseData_ != null ? other.BaseData.Clone() : null;
    parentNodeIndex_ = other.parentNodeIndex_;
    functionId_ = other.functionId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_FunctionCallNode Clone() {
    return new Save_FunctionCallNode(this);
  }

  /// <summary>Field number for the "base_data" field.</summary>
  public const int BaseDataFieldNumber = 1;
  private global::Save_NodeBaseData baseData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Save_NodeBaseData BaseData {
    get { return baseData_; }
    set {
      baseData_ = value;
    }
  }

  /// <summary>Field number for the "parent_node_index" field.</summary>
  public const int ParentNodeIndexFieldNumber = 2;
  private int parentNodeIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ParentNodeIndex {
    get { return parentNodeIndex_; }
    set {
      parentNodeIndex_ = value;
    }
  }

  /// <summary>Field number for the "function_id" field.</summary>
  public const int FunctionIdFieldNumber = 3;
  private pb::ByteString functionId_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString FunctionId {
    get { return functionId_; }
    set {
      functionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Save_FunctionCallNode);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Save_FunctionCallNode other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(BaseData, other.BaseData)) return false;
    if (ParentNodeIndex != other.ParentNodeIndex) return false;
    if (FunctionId != other.FunctionId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (baseData_ != null) hash ^= BaseData.GetHashCode();
    if (ParentNodeIndex != 0) hash ^= ParentNodeIndex.GetHashCode();
    if (FunctionId.Length != 0) hash ^= FunctionId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (baseData_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(BaseData);
    }
    if (ParentNodeIndex != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ParentNodeIndex);
    }
    if (FunctionId.Length != 0) {
      output.WriteRawTag(26);
      output.WriteBytes(FunctionId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (baseData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseData);
    }
    if (ParentNodeIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParentNodeIndex);
    }
    if (FunctionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(FunctionId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Save_FunctionCallNode other) {
    if (other == null) {
      return;
    }
    if (other.baseData_ != null) {
      if (baseData_ == null) {
        baseData_ = new global::Save_NodeBaseData();
      }
      BaseData.MergeFrom(other.BaseData);
    }
    if (other.ParentNodeIndex != 0) {
      ParentNodeIndex = other.ParentNodeIndex;
    }
    if (other.FunctionId.Length != 0) {
      FunctionId = other.FunctionId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (baseData_ == null) {
            baseData_ = new global::Save_NodeBaseData();
          }
          input.ReadMessage(baseData_);
          break;
        }
        case 16: {
          ParentNodeIndex = input.ReadInt32();
          break;
        }
        case 26: {
          FunctionId = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class Save_FunctionArgNode : pb::IMessage<Save_FunctionArgNode> {
  private static readonly pb::MessageParser<Save_FunctionArgNode> _parser = new pb::MessageParser<Save_FunctionArgNode>(() => new Save_FunctionArgNode());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Save_FunctionArgNode> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StackReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_FunctionArgNode() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_FunctionArgNode(Save_FunctionArgNode other) : this() {
    BaseData = other.baseData_ != null ? other.BaseData.Clone() : null;
    parentNodeIndex_ = other.parentNodeIndex_;
    functionId_ = other.functionId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_FunctionArgNode Clone() {
    return new Save_FunctionArgNode(this);
  }

  /// <summary>Field number for the "base_data" field.</summary>
  public const int BaseDataFieldNumber = 1;
  private global::Save_NodeBaseData baseData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Save_NodeBaseData BaseData {
    get { return baseData_; }
    set {
      baseData_ = value;
    }
  }

  /// <summary>Field number for the "parent_node_index" field.</summary>
  public const int ParentNodeIndexFieldNumber = 2;
  private int parentNodeIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ParentNodeIndex {
    get { return parentNodeIndex_; }
    set {
      parentNodeIndex_ = value;
    }
  }

  /// <summary>Field number for the "function_id" field.</summary>
  public const int FunctionIdFieldNumber = 3;
  private pb::ByteString functionId_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString FunctionId {
    get { return functionId_; }
    set {
      functionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Save_FunctionArgNode);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Save_FunctionArgNode other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(BaseData, other.BaseData)) return false;
    if (ParentNodeIndex != other.ParentNodeIndex) return false;
    if (FunctionId != other.FunctionId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (baseData_ != null) hash ^= BaseData.GetHashCode();
    if (ParentNodeIndex != 0) hash ^= ParentNodeIndex.GetHashCode();
    if (FunctionId.Length != 0) hash ^= FunctionId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (baseData_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(BaseData);
    }
    if (ParentNodeIndex != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ParentNodeIndex);
    }
    if (FunctionId.Length != 0) {
      output.WriteRawTag(26);
      output.WriteBytes(FunctionId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (baseData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseData);
    }
    if (ParentNodeIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParentNodeIndex);
    }
    if (FunctionId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(FunctionId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Save_FunctionArgNode other) {
    if (other == null) {
      return;
    }
    if (other.baseData_ != null) {
      if (baseData_ == null) {
        baseData_ = new global::Save_NodeBaseData();
      }
      BaseData.MergeFrom(other.BaseData);
    }
    if (other.ParentNodeIndex != 0) {
      ParentNodeIndex = other.ParentNodeIndex;
    }
    if (other.FunctionId.Length != 0) {
      FunctionId = other.FunctionId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (baseData_ == null) {
            baseData_ = new global::Save_NodeBaseData();
          }
          input.ReadMessage(baseData_);
          break;
        }
        case 16: {
          ParentNodeIndex = input.ReadInt32();
          break;
        }
        case 26: {
          FunctionId = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class Save_Variable : pb::IMessage<Save_Variable> {
  private static readonly pb::MessageParser<Save_Variable> _parser = new pb::MessageParser<Save_Variable>(() => new Save_Variable());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Save_Variable> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StackReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_Variable() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_Variable(Save_Variable other) : this() {
    variableType_ = other.variableType_;
    variableKey_ = other.variableKey_;
    variableVar_ = other.variableVar_;
    variableList_ = other.variableList_.Clone();
    variableStack_ = other.variableStack_.Clone();
    variableQueue_ = other.variableQueue_.Clone();
    oldGlobalVarOwner_ = other.oldGlobalVarOwner_;
    globalVarOwner_ = other.globalVarOwner_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_Variable Clone() {
    return new Save_Variable(this);
  }

  /// <summary>Field number for the "variable_type" field.</summary>
  public const int VariableTypeFieldNumber = 1;
  private global::Save_VariableType variableType_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Save_VariableType VariableType {
    get { return variableType_; }
    set {
      variableType_ = value;
    }
  }

  /// <summary>Field number for the "variable_key" field.</summary>
  public const int VariableKeyFieldNumber = 2;
  private string variableKey_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VariableKey {
    get { return variableKey_; }
    set {
      variableKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "variable_var" field.</summary>
  public const int VariableVarFieldNumber = 3;
  private string variableVar_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VariableVar {
    get { return variableVar_; }
    set {
      variableVar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "variable_list" field.</summary>
  public const int VariableListFieldNumber = 4;
  private static readonly pb::FieldCodec<string> _repeated_variableList_codec
      = pb::FieldCodec.ForString(34);
  private readonly pbc::RepeatedField<string> variableList_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> VariableList {
    get { return variableList_; }
  }

  /// <summary>Field number for the "variable_stack" field.</summary>
  public const int VariableStackFieldNumber = 5;
  private static readonly pb::FieldCodec<string> _repeated_variableStack_codec
      = pb::FieldCodec.ForString(42);
  private readonly pbc::RepeatedField<string> variableStack_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> VariableStack {
    get { return variableStack_; }
  }

  /// <summary>Field number for the "variable_queue" field.</summary>
  public const int VariableQueueFieldNumber = 6;
  private static readonly pb::FieldCodec<string> _repeated_variableQueue_codec
      = pb::FieldCodec.ForString(50);
  private readonly pbc::RepeatedField<string> variableQueue_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> VariableQueue {
    get { return variableQueue_; }
  }

  /// <summary>Field number for the "old_global_var_owner" field.</summary>
  public const int OldGlobalVarOwnerFieldNumber = 7;
  private global::Save_GlobalVarOwner oldGlobalVarOwner_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Save_GlobalVarOwner OldGlobalVarOwner {
    get { return oldGlobalVarOwner_; }
    set {
      oldGlobalVarOwner_ = value;
    }
  }

  /// <summary>Field number for the "global_var_owner" field.</summary>
  public const int GlobalVarOwnerFieldNumber = 8;
  private global::Save_GlobalVarOwner globalVarOwner_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Save_GlobalVarOwner GlobalVarOwner {
    get { return globalVarOwner_; }
    set {
      globalVarOwner_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Save_Variable);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Save_Variable other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (VariableType != other.VariableType) return false;
    if (VariableKey != other.VariableKey) return false;
    if (VariableVar != other.VariableVar) return false;
    if(!variableList_.Equals(other.variableList_)) return false;
    if(!variableStack_.Equals(other.variableStack_)) return false;
    if(!variableQueue_.Equals(other.variableQueue_)) return false;
    if (OldGlobalVarOwner != other.OldGlobalVarOwner) return false;
    if (GlobalVarOwner != other.GlobalVarOwner) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (VariableType != 0) hash ^= VariableType.GetHashCode();
    if (VariableKey.Length != 0) hash ^= VariableKey.GetHashCode();
    if (VariableVar.Length != 0) hash ^= VariableVar.GetHashCode();
    hash ^= variableList_.GetHashCode();
    hash ^= variableStack_.GetHashCode();
    hash ^= variableQueue_.GetHashCode();
    if (OldGlobalVarOwner != 0) hash ^= OldGlobalVarOwner.GetHashCode();
    if (GlobalVarOwner != 0) hash ^= GlobalVarOwner.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (VariableType != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) VariableType);
    }
    if (VariableKey.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(VariableKey);
    }
    if (VariableVar.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(VariableVar);
    }
    variableList_.WriteTo(output, _repeated_variableList_codec);
    variableStack_.WriteTo(output, _repeated_variableStack_codec);
    variableQueue_.WriteTo(output, _repeated_variableQueue_codec);
    if (OldGlobalVarOwner != 0) {
      output.WriteRawTag(56);
      output.WriteEnum((int) OldGlobalVarOwner);
    }
    if (GlobalVarOwner != 0) {
      output.WriteRawTag(64);
      output.WriteEnum((int) GlobalVarOwner);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (VariableType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VariableType);
    }
    if (VariableKey.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VariableKey);
    }
    if (VariableVar.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VariableVar);
    }
    size += variableList_.CalculateSize(_repeated_variableList_codec);
    size += variableStack_.CalculateSize(_repeated_variableStack_codec);
    size += variableQueue_.CalculateSize(_repeated_variableQueue_codec);
    if (OldGlobalVarOwner != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OldGlobalVarOwner);
    }
    if (GlobalVarOwner != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GlobalVarOwner);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Save_Variable other) {
    if (other == null) {
      return;
    }
    if (other.VariableType != 0) {
      VariableType = other.VariableType;
    }
    if (other.VariableKey.Length != 0) {
      VariableKey = other.VariableKey;
    }
    if (other.VariableVar.Length != 0) {
      VariableVar = other.VariableVar;
    }
    variableList_.Add(other.variableList_);
    variableStack_.Add(other.variableStack_);
    variableQueue_.Add(other.variableQueue_);
    if (other.OldGlobalVarOwner != 0) {
      OldGlobalVarOwner = other.OldGlobalVarOwner;
    }
    if (other.GlobalVarOwner != 0) {
      GlobalVarOwner = other.GlobalVarOwner;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          variableType_ = (global::Save_VariableType) input.ReadEnum();
          break;
        }
        case 18: {
          VariableKey = input.ReadString();
          break;
        }
        case 26: {
          VariableVar = input.ReadString();
          break;
        }
        case 34: {
          variableList_.AddEntriesFrom(input, _repeated_variableList_codec);
          break;
        }
        case 42: {
          variableStack_.AddEntriesFrom(input, _repeated_variableStack_codec);
          break;
        }
        case 50: {
          variableQueue_.AddEntriesFrom(input, _repeated_variableQueue_codec);
          break;
        }
        case 56: {
          oldGlobalVarOwner_ = (global::Save_GlobalVarOwner) input.ReadEnum();
          break;
        }
        case 64: {
          globalVarOwner_ = (global::Save_GlobalVarOwner) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class Save_MessageExtraData : pb::IMessage<Save_MessageExtraData> {
  private static readonly pb::MessageParser<Save_MessageExtraData> _parser = new pb::MessageParser<Save_MessageExtraData>(() => new Save_MessageExtraData());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Save_MessageExtraData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StackReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_MessageExtraData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_MessageExtraData(Save_MessageExtraData other) : this() {
    robotIndices_ = other.robotIndices_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_MessageExtraData Clone() {
    return new Save_MessageExtraData(this);
  }

  /// <summary>Field number for the "robot_indices" field.</summary>
  public const int RobotIndicesFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_robotIndices_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> robotIndices_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> RobotIndices {
    get { return robotIndices_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Save_MessageExtraData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Save_MessageExtraData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!robotIndices_.Equals(other.robotIndices_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= robotIndices_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    robotIndices_.WriteTo(output, _repeated_robotIndices_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += robotIndices_.CalculateSize(_repeated_robotIndices_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Save_MessageExtraData other) {
    if (other == null) {
      return;
    }
    robotIndices_.Add(other.robotIndices_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 8: {
          robotIndices_.AddEntriesFrom(input, _repeated_robotIndices_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class Save_Vector2 : pb::IMessage<Save_Vector2> {
  private static readonly pb::MessageParser<Save_Vector2> _parser = new pb::MessageParser<Save_Vector2>(() => new Save_Vector2());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Save_Vector2> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StackReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_Vector2() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_Vector2(Save_Vector2 other) : this() {
    x_ = other.x_;
    y_ = other.y_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_Vector2 Clone() {
    return new Save_Vector2(this);
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 1;
  private float x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 2;
  private float y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Save_Vector2);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Save_Vector2 other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (X != other.X) return false;
    if (Y != other.Y) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (X != 0F) hash ^= X.GetHashCode();
    if (Y != 0F) hash ^= Y.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (X != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(X);
    }
    if (Y != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Y);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (X != 0F) {
      size += 1 + 4;
    }
    if (Y != 0F) {
      size += 1 + 4;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Save_Vector2 other) {
    if (other == null) {
      return;
    }
    if (other.X != 0F) {
      X = other.X;
    }
    if (other.Y != 0F) {
      Y = other.Y;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 13: {
          X = input.ReadFloat();
          break;
        }
        case 21: {
          Y = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class Save_ProjectData : pb::IMessage<Save_ProjectData> {
  private static readonly pb::MessageParser<Save_ProjectData> _parser = new pb::MessageParser<Save_ProjectData>(() => new Save_ProjectData());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Save_ProjectData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StackReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_ProjectData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_ProjectData(Save_ProjectData other) : this() {
    soundState_ = other.soundState_;
    stopMode_ = other.stopMode_;
    blockLevel_ = other.blockLevel_;
    nodeIndex_ = other.nodeIndex_;
    panelScale_ = other.panelScale_;
    panelPosX_ = other.panelPosX_;
    panelPosY_ = other.panelPosY_;
    panelPosZ_ = other.panelPosZ_;
    nodeList_ = other.nodeList_.Clone();
    localVariables_ = other.localVariables_.Clone();
    localMessages_ = other.localMessages_.Clone();
    globalVariables_ = other.globalVariables_.Clone();
    globalMessages_ = other.globalMessages_.Clone();
    localMessageExtraData_ = other.localMessageExtraData_.Clone();
    globalMessageExtraData_ = other.globalMessageExtraData_.Clone();
    PanelPos = other.panelPos_ != null ? other.PanelPos.Clone() : null;
    funcDecls_ = other.funcDecls_.Clone();
    declNodes_ = other.declNodes_.Clone();
    callNodes_ = other.callNodes_.Clone();
    callReturnNodes_ = other.callReturnNodes_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_ProjectData Clone() {
    return new Save_ProjectData(this);
  }

  /// <summary>Field number for the "sound_state" field.</summary>
  public const int SoundStateFieldNumber = 1;
  private bool soundState_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool SoundState {
    get { return soundState_; }
    set {
      soundState_ = value;
    }
  }

  /// <summary>Field number for the "stop_mode" field.</summary>
  public const int StopModeFieldNumber = 2;
  private int stopMode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int StopMode {
    get { return stopMode_; }
    set {
      stopMode_ = value;
    }
  }

  /// <summary>Field number for the "block_level" field.</summary>
  public const int BlockLevelFieldNumber = 3;
  private int blockLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BlockLevel {
    get { return blockLevel_; }
    set {
      blockLevel_ = value;
    }
  }

  /// <summary>Field number for the "node_index" field.</summary>
  public const int NodeIndexFieldNumber = 4;
  private int nodeIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NodeIndex {
    get { return nodeIndex_; }
    set {
      nodeIndex_ = value;
    }
  }

  /// <summary>Field number for the "panel_scale" field.</summary>
  public const int PanelScaleFieldNumber = 5;
  private float panelScale_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float PanelScale {
    get { return panelScale_; }
    set {
      panelScale_ = value;
    }
  }

  /// <summary>Field number for the "panel_pos_x" field.</summary>
  public const int PanelPosXFieldNumber = 6;
  private float panelPosX_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float PanelPosX {
    get { return panelPosX_; }
    set {
      panelPosX_ = value;
    }
  }

  /// <summary>Field number for the "panel_pos_y" field.</summary>
  public const int PanelPosYFieldNumber = 7;
  private float panelPosY_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float PanelPosY {
    get { return panelPosY_; }
    set {
      panelPosY_ = value;
    }
  }

  /// <summary>Field number for the "panel_pos_z" field.</summary>
  public const int PanelPosZFieldNumber = 8;
  private float panelPosZ_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float PanelPosZ {
    get { return panelPosZ_; }
    set {
      panelPosZ_ = value;
    }
  }

  /// <summary>Field number for the "node_list" field.</summary>
  public const int NodeListFieldNumber = 9;
  private static readonly pb::FieldCodec<global::Save_NodeData> _repeated_nodeList_codec
      = pb::FieldCodec.ForMessage(74, global::Save_NodeData.Parser);
  private readonly pbc::RepeatedField<global::Save_NodeData> nodeList_ = new pbc::RepeatedField<global::Save_NodeData>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Save_NodeData> NodeList {
    get { return nodeList_; }
  }

  /// <summary>Field number for the "local_variables" field.</summary>
  public const int LocalVariablesFieldNumber = 10;
  private static readonly pb::FieldCodec<global::Save_Variable> _repeated_localVariables_codec
      = pb::FieldCodec.ForMessage(82, global::Save_Variable.Parser);
  private readonly pbc::RepeatedField<global::Save_Variable> localVariables_ = new pbc::RepeatedField<global::Save_Variable>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Save_Variable> LocalVariables {
    get { return localVariables_; }
  }

  /// <summary>Field number for the "local_messages" field.</summary>
  public const int LocalMessagesFieldNumber = 11;
  private static readonly pb::FieldCodec<string> _repeated_localMessages_codec
      = pb::FieldCodec.ForString(90);
  private readonly pbc::RepeatedField<string> localMessages_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> LocalMessages {
    get { return localMessages_; }
  }

  /// <summary>Field number for the "global_variables" field.</summary>
  public const int GlobalVariablesFieldNumber = 12;
  private static readonly pb::FieldCodec<global::Save_Variable> _repeated_globalVariables_codec
      = pb::FieldCodec.ForMessage(98, global::Save_Variable.Parser);
  private readonly pbc::RepeatedField<global::Save_Variable> globalVariables_ = new pbc::RepeatedField<global::Save_Variable>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Save_Variable> GlobalVariables {
    get { return globalVariables_; }
  }

  /// <summary>Field number for the "global_messages" field.</summary>
  public const int GlobalMessagesFieldNumber = 13;
  private static readonly pb::FieldCodec<string> _repeated_globalMessages_codec
      = pb::FieldCodec.ForString(106);
  private readonly pbc::RepeatedField<string> globalMessages_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> GlobalMessages {
    get { return globalMessages_; }
  }

  /// <summary>Field number for the "local_message_extra_data" field.</summary>
  public const int LocalMessageExtraDataFieldNumber = 14;
  private static readonly pb::FieldCodec<global::Save_MessageExtraData> _repeated_localMessageExtraData_codec
      = pb::FieldCodec.ForMessage(114, global::Save_MessageExtraData.Parser);
  private readonly pbc::RepeatedField<global::Save_MessageExtraData> localMessageExtraData_ = new pbc::RepeatedField<global::Save_MessageExtraData>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Save_MessageExtraData> LocalMessageExtraData {
    get { return localMessageExtraData_; }
  }

  /// <summary>Field number for the "global_message_extra_data" field.</summary>
  public const int GlobalMessageExtraDataFieldNumber = 15;
  private static readonly pb::FieldCodec<global::Save_MessageExtraData> _repeated_globalMessageExtraData_codec
      = pb::FieldCodec.ForMessage(122, global::Save_MessageExtraData.Parser);
  private readonly pbc::RepeatedField<global::Save_MessageExtraData> globalMessageExtraData_ = new pbc::RepeatedField<global::Save_MessageExtraData>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Save_MessageExtraData> GlobalMessageExtraData {
    get { return globalMessageExtraData_; }
  }

  /// <summary>Field number for the "panel_pos" field.</summary>
  public const int PanelPosFieldNumber = 16;
  private global::Save_Vector2 panelPos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Save_Vector2 PanelPos {
    get { return panelPos_; }
    set {
      panelPos_ = value;
    }
  }

  /// <summary>Field number for the "func_decls" field.</summary>
  public const int FuncDeclsFieldNumber = 17;
  private static readonly pb::FieldCodec<global::Save_FunctionDecl> _repeated_funcDecls_codec
      = pb::FieldCodec.ForMessage(138, global::Save_FunctionDecl.Parser);
  private readonly pbc::RepeatedField<global::Save_FunctionDecl> funcDecls_ = new pbc::RepeatedField<global::Save_FunctionDecl>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Save_FunctionDecl> FuncDecls {
    get { return funcDecls_; }
  }

  /// <summary>Field number for the "decl_nodes" field.</summary>
  public const int DeclNodesFieldNumber = 18;
  private static readonly pbc::MapField<int, int>.Codec _map_declNodes_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 146);
  private readonly pbc::MapField<int, int> declNodes_ = new pbc::MapField<int, int>();
  /// <summary>
  ///  node index -> decl index
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> DeclNodes {
    get { return declNodes_; }
  }

  /// <summary>Field number for the "call_nodes" field.</summary>
  public const int CallNodesFieldNumber = 19;
  private static readonly pbc::MapField<int, int>.Codec _map_callNodes_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 154);
  private readonly pbc::MapField<int, int> callNodes_ = new pbc::MapField<int, int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> CallNodes {
    get { return callNodes_; }
  }

  /// <summary>Field number for the "call_return_nodes" field.</summary>
  public const int CallReturnNodesFieldNumber = 20;
  private static readonly pbc::MapField<int, int>.Codec _map_callReturnNodes_codec
      = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 162);
  private readonly pbc::MapField<int, int> callReturnNodes_ = new pbc::MapField<int, int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::MapField<int, int> CallReturnNodes {
    get { return callReturnNodes_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Save_ProjectData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Save_ProjectData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SoundState != other.SoundState) return false;
    if (StopMode != other.StopMode) return false;
    if (BlockLevel != other.BlockLevel) return false;
    if (NodeIndex != other.NodeIndex) return false;
    if (PanelScale != other.PanelScale) return false;
    if (PanelPosX != other.PanelPosX) return false;
    if (PanelPosY != other.PanelPosY) return false;
    if (PanelPosZ != other.PanelPosZ) return false;
    if(!nodeList_.Equals(other.nodeList_)) return false;
    if(!localVariables_.Equals(other.localVariables_)) return false;
    if(!localMessages_.Equals(other.localMessages_)) return false;
    if(!globalVariables_.Equals(other.globalVariables_)) return false;
    if(!globalMessages_.Equals(other.globalMessages_)) return false;
    if(!localMessageExtraData_.Equals(other.localMessageExtraData_)) return false;
    if(!globalMessageExtraData_.Equals(other.globalMessageExtraData_)) return false;
    if (!object.Equals(PanelPos, other.PanelPos)) return false;
    if(!funcDecls_.Equals(other.funcDecls_)) return false;
    if (!DeclNodes.Equals(other.DeclNodes)) return false;
    if (!CallNodes.Equals(other.CallNodes)) return false;
    if (!CallReturnNodes.Equals(other.CallReturnNodes)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SoundState != false) hash ^= SoundState.GetHashCode();
    if (StopMode != 0) hash ^= StopMode.GetHashCode();
    if (BlockLevel != 0) hash ^= BlockLevel.GetHashCode();
    if (NodeIndex != 0) hash ^= NodeIndex.GetHashCode();
    if (PanelScale != 0F) hash ^= PanelScale.GetHashCode();
    if (PanelPosX != 0F) hash ^= PanelPosX.GetHashCode();
    if (PanelPosY != 0F) hash ^= PanelPosY.GetHashCode();
    if (PanelPosZ != 0F) hash ^= PanelPosZ.GetHashCode();
    hash ^= nodeList_.GetHashCode();
    hash ^= localVariables_.GetHashCode();
    hash ^= localMessages_.GetHashCode();
    hash ^= globalVariables_.GetHashCode();
    hash ^= globalMessages_.GetHashCode();
    hash ^= localMessageExtraData_.GetHashCode();
    hash ^= globalMessageExtraData_.GetHashCode();
    if (panelPos_ != null) hash ^= PanelPos.GetHashCode();
    hash ^= funcDecls_.GetHashCode();
    hash ^= DeclNodes.GetHashCode();
    hash ^= CallNodes.GetHashCode();
    hash ^= CallReturnNodes.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SoundState != false) {
      output.WriteRawTag(8);
      output.WriteBool(SoundState);
    }
    if (StopMode != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(StopMode);
    }
    if (BlockLevel != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(BlockLevel);
    }
    if (NodeIndex != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(NodeIndex);
    }
    if (PanelScale != 0F) {
      output.WriteRawTag(45);
      output.WriteFloat(PanelScale);
    }
    if (PanelPosX != 0F) {
      output.WriteRawTag(53);
      output.WriteFloat(PanelPosX);
    }
    if (PanelPosY != 0F) {
      output.WriteRawTag(61);
      output.WriteFloat(PanelPosY);
    }
    if (PanelPosZ != 0F) {
      output.WriteRawTag(69);
      output.WriteFloat(PanelPosZ);
    }
    nodeList_.WriteTo(output, _repeated_nodeList_codec);
    localVariables_.WriteTo(output, _repeated_localVariables_codec);
    localMessages_.WriteTo(output, _repeated_localMessages_codec);
    globalVariables_.WriteTo(output, _repeated_globalVariables_codec);
    globalMessages_.WriteTo(output, _repeated_globalMessages_codec);
    localMessageExtraData_.WriteTo(output, _repeated_localMessageExtraData_codec);
    globalMessageExtraData_.WriteTo(output, _repeated_globalMessageExtraData_codec);
    if (panelPos_ != null) {
      output.WriteRawTag(130, 1);
      output.WriteMessage(PanelPos);
    }
    funcDecls_.WriteTo(output, _repeated_funcDecls_codec);
    declNodes_.WriteTo(output, _map_declNodes_codec);
    callNodes_.WriteTo(output, _map_callNodes_codec);
    callReturnNodes_.WriteTo(output, _map_callReturnNodes_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SoundState != false) {
      size += 1 + 1;
    }
    if (StopMode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(StopMode);
    }
    if (BlockLevel != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockLevel);
    }
    if (NodeIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NodeIndex);
    }
    if (PanelScale != 0F) {
      size += 1 + 4;
    }
    if (PanelPosX != 0F) {
      size += 1 + 4;
    }
    if (PanelPosY != 0F) {
      size += 1 + 4;
    }
    if (PanelPosZ != 0F) {
      size += 1 + 4;
    }
    size += nodeList_.CalculateSize(_repeated_nodeList_codec);
    size += localVariables_.CalculateSize(_repeated_localVariables_codec);
    size += localMessages_.CalculateSize(_repeated_localMessages_codec);
    size += globalVariables_.CalculateSize(_repeated_globalVariables_codec);
    size += globalMessages_.CalculateSize(_repeated_globalMessages_codec);
    size += localMessageExtraData_.CalculateSize(_repeated_localMessageExtraData_codec);
    size += globalMessageExtraData_.CalculateSize(_repeated_globalMessageExtraData_codec);
    if (panelPos_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(PanelPos);
    }
    size += funcDecls_.CalculateSize(_repeated_funcDecls_codec);
    size += declNodes_.CalculateSize(_map_declNodes_codec);
    size += callNodes_.CalculateSize(_map_callNodes_codec);
    size += callReturnNodes_.CalculateSize(_map_callReturnNodes_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Save_ProjectData other) {
    if (other == null) {
      return;
    }
    if (other.SoundState != false) {
      SoundState = other.SoundState;
    }
    if (other.StopMode != 0) {
      StopMode = other.StopMode;
    }
    if (other.BlockLevel != 0) {
      BlockLevel = other.BlockLevel;
    }
    if (other.NodeIndex != 0) {
      NodeIndex = other.NodeIndex;
    }
    if (other.PanelScale != 0F) {
      PanelScale = other.PanelScale;
    }
    if (other.PanelPosX != 0F) {
      PanelPosX = other.PanelPosX;
    }
    if (other.PanelPosY != 0F) {
      PanelPosY = other.PanelPosY;
    }
    if (other.PanelPosZ != 0F) {
      PanelPosZ = other.PanelPosZ;
    }
    nodeList_.Add(other.nodeList_);
    localVariables_.Add(other.localVariables_);
    localMessages_.Add(other.localMessages_);
    globalVariables_.Add(other.globalVariables_);
    globalMessages_.Add(other.globalMessages_);
    localMessageExtraData_.Add(other.localMessageExtraData_);
    globalMessageExtraData_.Add(other.globalMessageExtraData_);
    if (other.panelPos_ != null) {
      if (panelPos_ == null) {
        panelPos_ = new global::Save_Vector2();
      }
      PanelPos.MergeFrom(other.PanelPos);
    }
    funcDecls_.Add(other.funcDecls_);
    declNodes_.Add(other.declNodes_);
    callNodes_.Add(other.callNodes_);
    callReturnNodes_.Add(other.callReturnNodes_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          SoundState = input.ReadBool();
          break;
        }
        case 16: {
          StopMode = input.ReadInt32();
          break;
        }
        case 24: {
          BlockLevel = input.ReadInt32();
          break;
        }
        case 32: {
          NodeIndex = input.ReadInt32();
          break;
        }
        case 45: {
          PanelScale = input.ReadFloat();
          break;
        }
        case 53: {
          PanelPosX = input.ReadFloat();
          break;
        }
        case 61: {
          PanelPosY = input.ReadFloat();
          break;
        }
        case 69: {
          PanelPosZ = input.ReadFloat();
          break;
        }
        case 74: {
          nodeList_.AddEntriesFrom(input, _repeated_nodeList_codec);
          break;
        }
        case 82: {
          localVariables_.AddEntriesFrom(input, _repeated_localVariables_codec);
          break;
        }
        case 90: {
          localMessages_.AddEntriesFrom(input, _repeated_localMessages_codec);
          break;
        }
        case 98: {
          globalVariables_.AddEntriesFrom(input, _repeated_globalVariables_codec);
          break;
        }
        case 106: {
          globalMessages_.AddEntriesFrom(input, _repeated_globalMessages_codec);
          break;
        }
        case 114: {
          localMessageExtraData_.AddEntriesFrom(input, _repeated_localMessageExtraData_codec);
          break;
        }
        case 122: {
          globalMessageExtraData_.AddEntriesFrom(input, _repeated_globalMessageExtraData_codec);
          break;
        }
        case 130: {
          if (panelPos_ == null) {
            panelPos_ = new global::Save_Vector2();
          }
          input.ReadMessage(panelPos_);
          break;
        }
        case 138: {
          funcDecls_.AddEntriesFrom(input, _repeated_funcDecls_codec);
          break;
        }
        case 146: {
          declNodes_.AddEntriesFrom(input, _map_declNodes_codec);
          break;
        }
        case 154: {
          callNodes_.AddEntriesFrom(input, _map_callNodes_codec);
          break;
        }
        case 162: {
          callReturnNodes_.AddEntriesFrom(input, _map_callReturnNodes_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class Save_LeaveMessageNode : pb::IMessage<Save_LeaveMessageNode> {
  private static readonly pb::MessageParser<Save_LeaveMessageNode> _parser = new pb::MessageParser<Save_LeaveMessageNode>(() => new Save_LeaveMessageNode());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Save_LeaveMessageNode> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StackReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_LeaveMessageNode() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_LeaveMessageNode(Save_LeaveMessageNode other) : this() {
    userId_ = other.userId_;
    userName_ = other.userName_;
    msgType_ = other.msgType_;
    textTypeData_ = other.textTypeData_;
    voiceTypeData_ = other.voiceTypeData_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_LeaveMessageNode Clone() {
    return new Save_LeaveMessageNode(this);
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 1;
  private uint userId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  /// <summary>Field number for the "user_name" field.</summary>
  public const int UserNameFieldNumber = 2;
  private string userName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string UserName {
    get { return userName_; }
    set {
      userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "msg_type" field.</summary>
  public const int MsgTypeFieldNumber = 3;
  private int msgType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MsgType {
    get { return msgType_; }
    set {
      msgType_ = value;
    }
  }

  /// <summary>Field number for the "text_type_data" field.</summary>
  public const int TextTypeDataFieldNumber = 4;
  private string textTypeData_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TextTypeData {
    get { return textTypeData_; }
    set {
      textTypeData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "voice_type_data" field.</summary>
  public const int VoiceTypeDataFieldNumber = 5;
  private uint voiceTypeData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint VoiceTypeData {
    get { return voiceTypeData_; }
    set {
      voiceTypeData_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Save_LeaveMessageNode);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Save_LeaveMessageNode other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserId != other.UserId) return false;
    if (UserName != other.UserName) return false;
    if (MsgType != other.MsgType) return false;
    if (TextTypeData != other.TextTypeData) return false;
    if (VoiceTypeData != other.VoiceTypeData) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserId != 0) hash ^= UserId.GetHashCode();
    if (UserName.Length != 0) hash ^= UserName.GetHashCode();
    if (MsgType != 0) hash ^= MsgType.GetHashCode();
    if (TextTypeData.Length != 0) hash ^= TextTypeData.GetHashCode();
    if (VoiceTypeData != 0) hash ^= VoiceTypeData.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserId != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(UserId);
    }
    if (UserName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(UserName);
    }
    if (MsgType != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(MsgType);
    }
    if (TextTypeData.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(TextTypeData);
    }
    if (VoiceTypeData != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(VoiceTypeData);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserId);
    }
    if (UserName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
    }
    if (MsgType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MsgType);
    }
    if (TextTypeData.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TextTypeData);
    }
    if (VoiceTypeData != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VoiceTypeData);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Save_LeaveMessageNode other) {
    if (other == null) {
      return;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
    if (other.UserName.Length != 0) {
      UserName = other.UserName;
    }
    if (other.MsgType != 0) {
      MsgType = other.MsgType;
    }
    if (other.TextTypeData.Length != 0) {
      TextTypeData = other.TextTypeData;
    }
    if (other.VoiceTypeData != 0) {
      VoiceTypeData = other.VoiceTypeData;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          UserId = input.ReadUInt32();
          break;
        }
        case 18: {
          UserName = input.ReadString();
          break;
        }
        case 24: {
          MsgType = input.ReadInt32();
          break;
        }
        case 34: {
          TextTypeData = input.ReadString();
          break;
        }
        case 40: {
          VoiceTypeData = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class Save_LeaveMessageData : pb::IMessage<Save_LeaveMessageData> {
  private static readonly pb::MessageParser<Save_LeaveMessageData> _parser = new pb::MessageParser<Save_LeaveMessageData>(() => new Save_LeaveMessageData());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Save_LeaveMessageData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StackReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_LeaveMessageData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_LeaveMessageData(Save_LeaveMessageData other) : this() {
    msgKey_ = other.msgKey_;
    msgNodeList_ = other.msgNodeList_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_LeaveMessageData Clone() {
    return new Save_LeaveMessageData(this);
  }

  /// <summary>Field number for the "msg_key" field.</summary>
  public const int MsgKeyFieldNumber = 1;
  private string msgKey_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string MsgKey {
    get { return msgKey_; }
    set {
      msgKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "msg_node_list" field.</summary>
  public const int MsgNodeListFieldNumber = 2;
  private static readonly pb::FieldCodec<global::Save_LeaveMessageNode> _repeated_msgNodeList_codec
      = pb::FieldCodec.ForMessage(18, global::Save_LeaveMessageNode.Parser);
  private readonly pbc::RepeatedField<global::Save_LeaveMessageNode> msgNodeList_ = new pbc::RepeatedField<global::Save_LeaveMessageNode>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Save_LeaveMessageNode> MsgNodeList {
    get { return msgNodeList_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Save_LeaveMessageData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Save_LeaveMessageData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MsgKey != other.MsgKey) return false;
    if(!msgNodeList_.Equals(other.msgNodeList_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (MsgKey.Length != 0) hash ^= MsgKey.GetHashCode();
    hash ^= msgNodeList_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (MsgKey.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(MsgKey);
    }
    msgNodeList_.WriteTo(output, _repeated_msgNodeList_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (MsgKey.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MsgKey);
    }
    size += msgNodeList_.CalculateSize(_repeated_msgNodeList_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Save_LeaveMessageData other) {
    if (other == null) {
      return;
    }
    if (other.MsgKey.Length != 0) {
      MsgKey = other.MsgKey;
    }
    msgNodeList_.Add(other.msgNodeList_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          MsgKey = input.ReadString();
          break;
        }
        case 18: {
          msgNodeList_.AddEntriesFrom(input, _repeated_msgNodeList_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class Save_LeaveMessageData_All : pb::IMessage<Save_LeaveMessageData_All> {
  private static readonly pb::MessageParser<Save_LeaveMessageData_All> _parser = new pb::MessageParser<Save_LeaveMessageData_All>(() => new Save_LeaveMessageData_All());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Save_LeaveMessageData_All> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StackReflection.Descriptor.MessageTypes[20]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_LeaveMessageData_All() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_LeaveMessageData_All(Save_LeaveMessageData_All other) : this() {
    msgList_ = other.msgList_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_LeaveMessageData_All Clone() {
    return new Save_LeaveMessageData_All(this);
  }

  /// <summary>Field number for the "msg_list" field.</summary>
  public const int MsgListFieldNumber = 1;
  private static readonly pb::FieldCodec<global::Save_LeaveMessageData> _repeated_msgList_codec
      = pb::FieldCodec.ForMessage(10, global::Save_LeaveMessageData.Parser);
  private readonly pbc::RepeatedField<global::Save_LeaveMessageData> msgList_ = new pbc::RepeatedField<global::Save_LeaveMessageData>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Save_LeaveMessageData> MsgList {
    get { return msgList_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Save_LeaveMessageData_All);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Save_LeaveMessageData_All other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!msgList_.Equals(other.msgList_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= msgList_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    msgList_.WriteTo(output, _repeated_msgList_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += msgList_.CalculateSize(_repeated_msgList_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Save_LeaveMessageData_All other) {
    if (other == null) {
      return;
    }
    msgList_.Add(other.msgList_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          msgList_.AddEntriesFrom(input, _repeated_msgList_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class Save_Vector3 : pb::IMessage<Save_Vector3> {
  private static readonly pb::MessageParser<Save_Vector3> _parser = new pb::MessageParser<Save_Vector3>(() => new Save_Vector3());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Save_Vector3> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StackReflection.Descriptor.MessageTypes[21]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_Vector3() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_Vector3(Save_Vector3 other) : this() {
    x_ = other.x_;
    y_ = other.y_;
    z_ = other.z_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_Vector3 Clone() {
    return new Save_Vector3(this);
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 1;
  private float x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 2;
  private float y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  /// <summary>Field number for the "z" field.</summary>
  public const int ZFieldNumber = 3;
  private float z_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Z {
    get { return z_; }
    set {
      z_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Save_Vector3);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Save_Vector3 other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (X != other.X) return false;
    if (Y != other.Y) return false;
    if (Z != other.Z) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (X != 0F) hash ^= X.GetHashCode();
    if (Y != 0F) hash ^= Y.GetHashCode();
    if (Z != 0F) hash ^= Z.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (X != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(X);
    }
    if (Y != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Y);
    }
    if (Z != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Z);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (X != 0F) {
      size += 1 + 4;
    }
    if (Y != 0F) {
      size += 1 + 4;
    }
    if (Z != 0F) {
      size += 1 + 4;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Save_Vector3 other) {
    if (other == null) {
      return;
    }
    if (other.X != 0F) {
      X = other.X;
    }
    if (other.Y != 0F) {
      Y = other.Y;
    }
    if (other.Z != 0F) {
      Z = other.Z;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 13: {
          X = input.ReadFloat();
          break;
        }
        case 21: {
          Y = input.ReadFloat();
          break;
        }
        case 29: {
          Z = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class Save_GameboardObject : pb::IMessage<Save_GameboardObject> {
  private static readonly pb::MessageParser<Save_GameboardObject> _parser = new pb::MessageParser<Save_GameboardObject>(() => new Save_GameboardObject());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Save_GameboardObject> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StackReflection.Descriptor.MessageTypes[22]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_GameboardObject() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_GameboardObject(Save_GameboardObject other) : this() {
    name_ = other.name_;
    assetId_ = other.assetId_;
    Position = other.position_ != null ? other.Position.Clone() : null;
    oldRot_ = other.oldRot_;
    Scale = other.scale_ != null ? other.Scale.Clone() : null;
    Rotation = other.rotation_ != null ? other.Rotation.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_GameboardObject Clone() {
    return new Save_GameboardObject(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "asset_id" field.</summary>
  public const int AssetIdFieldNumber = 2;
  private int assetId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AssetId {
    get { return assetId_; }
    set {
      assetId_ = value;
    }
  }

  /// <summary>Field number for the "position" field.</summary>
  public const int PositionFieldNumber = 3;
  private global::Save_Vector3 position_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Save_Vector3 Position {
    get { return position_; }
    set {
      position_ = value;
    }
  }

  /// <summary>Field number for the "old_rot" field.</summary>
  public const int OldRotFieldNumber = 4;
  private float oldRot_;
  /// <summary>
  ///  deperacated
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float OldRot {
    get { return oldRot_; }
    set {
      oldRot_ = value;
    }
  }

  /// <summary>Field number for the "scale" field.</summary>
  public const int ScaleFieldNumber = 5;
  private global::Save_Vector3 scale_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Save_Vector3 Scale {
    get { return scale_; }
    set {
      scale_ = value;
    }
  }

  /// <summary>Field number for the "rotation" field.</summary>
  public const int RotationFieldNumber = 6;
  private global::Save_Vector3 rotation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Save_Vector3 Rotation {
    get { return rotation_; }
    set {
      rotation_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Save_GameboardObject);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Save_GameboardObject other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (AssetId != other.AssetId) return false;
    if (!object.Equals(Position, other.Position)) return false;
    if (OldRot != other.OldRot) return false;
    if (!object.Equals(Scale, other.Scale)) return false;
    if (!object.Equals(Rotation, other.Rotation)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (AssetId != 0) hash ^= AssetId.GetHashCode();
    if (position_ != null) hash ^= Position.GetHashCode();
    if (OldRot != 0F) hash ^= OldRot.GetHashCode();
    if (scale_ != null) hash ^= Scale.GetHashCode();
    if (rotation_ != null) hash ^= Rotation.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (AssetId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(AssetId);
    }
    if (position_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Position);
    }
    if (OldRot != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(OldRot);
    }
    if (scale_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Scale);
    }
    if (rotation_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(Rotation);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (AssetId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AssetId);
    }
    if (position_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
    }
    if (OldRot != 0F) {
      size += 1 + 4;
    }
    if (scale_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scale);
    }
    if (rotation_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Save_GameboardObject other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.AssetId != 0) {
      AssetId = other.AssetId;
    }
    if (other.position_ != null) {
      if (position_ == null) {
        position_ = new global::Save_Vector3();
      }
      Position.MergeFrom(other.Position);
    }
    if (other.OldRot != 0F) {
      OldRot = other.OldRot;
    }
    if (other.scale_ != null) {
      if (scale_ == null) {
        scale_ = new global::Save_Vector3();
      }
      Scale.MergeFrom(other.Scale);
    }
    if (other.rotation_ != null) {
      if (rotation_ == null) {
        rotation_ = new global::Save_Vector3();
      }
      Rotation.MergeFrom(other.Rotation);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 16: {
          AssetId = input.ReadInt32();
          break;
        }
        case 26: {
          if (position_ == null) {
            position_ = new global::Save_Vector3();
          }
          input.ReadMessage(position_);
          break;
        }
        case 37: {
          OldRot = input.ReadFloat();
          break;
        }
        case 42: {
          if (scale_ == null) {
            scale_ = new global::Save_Vector3();
          }
          input.ReadMessage(scale_);
          break;
        }
        case 50: {
          if (rotation_ == null) {
            rotation_ = new global::Save_Vector3();
          }
          input.ReadMessage(rotation_);
          break;
        }
      }
    }
  }

}

public sealed partial class Save_GameboardObjectAssetInfo : pb::IMessage<Save_GameboardObjectAssetInfo> {
  private static readonly pb::MessageParser<Save_GameboardObjectAssetInfo> _parser = new pb::MessageParser<Save_GameboardObjectAssetInfo>(() => new Save_GameboardObjectAssetInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Save_GameboardObjectAssetInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StackReflection.Descriptor.MessageTypes[23]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_GameboardObjectAssetInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_GameboardObjectAssetInfo(Save_GameboardObjectAssetInfo other) : this() {
    assetId_ = other.assetId_;
    nextObjectNum_ = other.nextObjectNum_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_GameboardObjectAssetInfo Clone() {
    return new Save_GameboardObjectAssetInfo(this);
  }

  /// <summary>Field number for the "asset_id" field.</summary>
  public const int AssetIdFieldNumber = 1;
  private int assetId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AssetId {
    get { return assetId_; }
    set {
      assetId_ = value;
    }
  }

  /// <summary>Field number for the "next_object_num" field.</summary>
  public const int NextObjectNumFieldNumber = 2;
  private int nextObjectNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NextObjectNum {
    get { return nextObjectNum_; }
    set {
      nextObjectNum_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Save_GameboardObjectAssetInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Save_GameboardObjectAssetInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AssetId != other.AssetId) return false;
    if (NextObjectNum != other.NextObjectNum) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (AssetId != 0) hash ^= AssetId.GetHashCode();
    if (NextObjectNum != 0) hash ^= NextObjectNum.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (AssetId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(AssetId);
    }
    if (NextObjectNum != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(NextObjectNum);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (AssetId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AssetId);
    }
    if (NextObjectNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextObjectNum);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Save_GameboardObjectAssetInfo other) {
    if (other == null) {
      return;
    }
    if (other.AssetId != 0) {
      AssetId = other.AssetId;
    }
    if (other.NextObjectNum != 0) {
      NextObjectNum = other.NextObjectNum;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          AssetId = input.ReadInt32();
          break;
        }
        case 16: {
          NextObjectNum = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class Save_GameboardRobot : pb::IMessage<Save_GameboardRobot> {
  private static readonly pb::MessageParser<Save_GameboardRobot> _parser = new pb::MessageParser<Save_GameboardRobot>(() => new Save_GameboardRobot());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Save_GameboardRobot> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StackReflection.Descriptor.MessageTypes[24]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_GameboardRobot() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_GameboardRobot(Save_GameboardRobot other) : this() {
    x_ = other.x_;
    y_ = other.y_;
    rotation_ = other.rotation_;
    colorId_ = other.colorId_;
    z_ = other.z_;
    Scale = other.scale_ != null ? other.Scale.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_GameboardRobot Clone() {
    return new Save_GameboardRobot(this);
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 1;
  private float x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 2;
  private float y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  /// <summary>Field number for the "rotation" field.</summary>
  public const int RotationFieldNumber = 3;
  private float rotation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Rotation {
    get { return rotation_; }
    set {
      rotation_ = value;
    }
  }

  /// <summary>Field number for the "color_id" field.</summary>
  public const int ColorIdFieldNumber = 4;
  private int colorId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ColorId {
    get { return colorId_; }
    set {
      colorId_ = value;
    }
  }

  /// <summary>Field number for the "z" field.</summary>
  public const int ZFieldNumber = 5;
  private float z_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Z {
    get { return z_; }
    set {
      z_ = value;
    }
  }

  /// <summary>Field number for the "scale" field.</summary>
  public const int ScaleFieldNumber = 6;
  private global::Save_Vector3 scale_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Save_Vector3 Scale {
    get { return scale_; }
    set {
      scale_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Save_GameboardRobot);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Save_GameboardRobot other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (X != other.X) return false;
    if (Y != other.Y) return false;
    if (Rotation != other.Rotation) return false;
    if (ColorId != other.ColorId) return false;
    if (Z != other.Z) return false;
    if (!object.Equals(Scale, other.Scale)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (X != 0F) hash ^= X.GetHashCode();
    if (Y != 0F) hash ^= Y.GetHashCode();
    if (Rotation != 0F) hash ^= Rotation.GetHashCode();
    if (ColorId != 0) hash ^= ColorId.GetHashCode();
    if (Z != 0F) hash ^= Z.GetHashCode();
    if (scale_ != null) hash ^= Scale.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (X != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(X);
    }
    if (Y != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Y);
    }
    if (Rotation != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Rotation);
    }
    if (ColorId != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(ColorId);
    }
    if (Z != 0F) {
      output.WriteRawTag(45);
      output.WriteFloat(Z);
    }
    if (scale_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(Scale);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (X != 0F) {
      size += 1 + 4;
    }
    if (Y != 0F) {
      size += 1 + 4;
    }
    if (Rotation != 0F) {
      size += 1 + 4;
    }
    if (ColorId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ColorId);
    }
    if (Z != 0F) {
      size += 1 + 4;
    }
    if (scale_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scale);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Save_GameboardRobot other) {
    if (other == null) {
      return;
    }
    if (other.X != 0F) {
      X = other.X;
    }
    if (other.Y != 0F) {
      Y = other.Y;
    }
    if (other.Rotation != 0F) {
      Rotation = other.Rotation;
    }
    if (other.ColorId != 0) {
      ColorId = other.ColorId;
    }
    if (other.Z != 0F) {
      Z = other.Z;
    }
    if (other.scale_ != null) {
      if (scale_ == null) {
        scale_ = new global::Save_Vector3();
      }
      Scale.MergeFrom(other.Scale);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 13: {
          X = input.ReadFloat();
          break;
        }
        case 21: {
          Y = input.ReadFloat();
          break;
        }
        case 29: {
          Rotation = input.ReadFloat();
          break;
        }
        case 32: {
          ColorId = input.ReadInt32();
          break;
        }
        case 45: {
          Z = input.ReadFloat();
          break;
        }
        case 50: {
          if (scale_ == null) {
            scale_ = new global::Save_Vector3();
          }
          input.ReadMessage(scale_);
          break;
        }
      }
    }
  }

}

public sealed partial class Save_GameboardCodeGroup : pb::IMessage<Save_GameboardCodeGroup> {
  private static readonly pb::MessageParser<Save_GameboardCodeGroup> _parser = new pb::MessageParser<Save_GameboardCodeGroup>(() => new Save_GameboardCodeGroup());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Save_GameboardCodeGroup> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StackReflection.Descriptor.MessageTypes[25]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_GameboardCodeGroup() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_GameboardCodeGroup(Save_GameboardCodeGroup other) : this() {
    projectPath_ = other.projectPath_;
    robotIndices_ = other.robotIndices_.Clone();
    projectName_ = other.projectName_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_GameboardCodeGroup Clone() {
    return new Save_GameboardCodeGroup(this);
  }

  /// <summary>Field number for the "project_path" field.</summary>
  public const int ProjectPathFieldNumber = 1;
  private string projectPath_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ProjectPath {
    get { return projectPath_; }
    set {
      projectPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "robot_indices" field.</summary>
  public const int RobotIndicesFieldNumber = 2;
  private static readonly pb::FieldCodec<int> _repeated_robotIndices_codec
      = pb::FieldCodec.ForInt32(18);
  private readonly pbc::RepeatedField<int> robotIndices_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> RobotIndices {
    get { return robotIndices_; }
  }

  /// <summary>Field number for the "project_name" field.</summary>
  public const int ProjectNameFieldNumber = 3;
  private string projectName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ProjectName {
    get { return projectName_; }
    set {
      projectName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Save_GameboardCodeGroup);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Save_GameboardCodeGroup other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ProjectPath != other.ProjectPath) return false;
    if(!robotIndices_.Equals(other.robotIndices_)) return false;
    if (ProjectName != other.ProjectName) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ProjectPath.Length != 0) hash ^= ProjectPath.GetHashCode();
    hash ^= robotIndices_.GetHashCode();
    if (ProjectName.Length != 0) hash ^= ProjectName.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ProjectPath.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(ProjectPath);
    }
    robotIndices_.WriteTo(output, _repeated_robotIndices_codec);
    if (ProjectName.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(ProjectName);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ProjectPath.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectPath);
    }
    size += robotIndices_.CalculateSize(_repeated_robotIndices_codec);
    if (ProjectName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectName);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Save_GameboardCodeGroup other) {
    if (other == null) {
      return;
    }
    if (other.ProjectPath.Length != 0) {
      ProjectPath = other.ProjectPath;
    }
    robotIndices_.Add(other.robotIndices_);
    if (other.ProjectName.Length != 0) {
      ProjectName = other.ProjectName;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          ProjectPath = input.ReadString();
          break;
        }
        case 18:
        case 16: {
          robotIndices_.AddEntriesFrom(input, _repeated_robotIndices_codec);
          break;
        }
        case 26: {
          ProjectName = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class Save_Gameboard : pb::IMessage<Save_Gameboard> {
  private static readonly pb::MessageParser<Save_Gameboard> _parser = new pb::MessageParser<Save_Gameboard>(() => new Save_Gameboard());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Save_Gameboard> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StackReflection.Descriptor.MessageTypes[26]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_Gameboard() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_Gameboard(Save_Gameboard other) : this() {
    version_ = other.version_;
    themeId_ = other.themeId_;
    sourceCodeAvailable_ = other.sourceCodeAvailable_;
    robots_ = other.robots_.Clone();
    visualCodeGroups_ = other.visualCodeGroups_.Clone();
    pythonCodeGroups_ = other.pythonCodeGroups_.Clone();
    objects_ = other.objects_.Clone();
    assetsInfo_ = other.assetsInfo_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_Gameboard Clone() {
    return new Save_Gameboard(this);
  }

  /// <summary>Field number for the "version" field.</summary>
  public const int VersionFieldNumber = 1;
  private int version_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Version {
    get { return version_; }
    set {
      version_ = value;
    }
  }

  /// <summary>Field number for the "theme_id" field.</summary>
  public const int ThemeIdFieldNumber = 2;
  private int themeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ThemeId {
    get { return themeId_; }
    set {
      themeId_ = value;
    }
  }

  /// <summary>Field number for the "source_code_available" field.</summary>
  public const int SourceCodeAvailableFieldNumber = 3;
  private bool sourceCodeAvailable_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool SourceCodeAvailable {
    get { return sourceCodeAvailable_; }
    set {
      sourceCodeAvailable_ = value;
    }
  }

  /// <summary>Field number for the "robots" field.</summary>
  public const int RobotsFieldNumber = 4;
  private static readonly pb::FieldCodec<global::Save_GameboardRobot> _repeated_robots_codec
      = pb::FieldCodec.ForMessage(34, global::Save_GameboardRobot.Parser);
  private readonly pbc::RepeatedField<global::Save_GameboardRobot> robots_ = new pbc::RepeatedField<global::Save_GameboardRobot>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Save_GameboardRobot> Robots {
    get { return robots_; }
  }

  /// <summary>Field number for the "visualCodeGroups" field.</summary>
  public const int VisualCodeGroupsFieldNumber = 5;
  private static readonly pb::FieldCodec<global::Save_GameboardCodeGroup> _repeated_visualCodeGroups_codec
      = pb::FieldCodec.ForMessage(42, global::Save_GameboardCodeGroup.Parser);
  private readonly pbc::RepeatedField<global::Save_GameboardCodeGroup> visualCodeGroups_ = new pbc::RepeatedField<global::Save_GameboardCodeGroup>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Save_GameboardCodeGroup> VisualCodeGroups {
    get { return visualCodeGroups_; }
  }

  /// <summary>Field number for the "pythonCodeGroups" field.</summary>
  public const int PythonCodeGroupsFieldNumber = 6;
  private static readonly pb::FieldCodec<global::Save_GameboardCodeGroup> _repeated_pythonCodeGroups_codec
      = pb::FieldCodec.ForMessage(50, global::Save_GameboardCodeGroup.Parser);
  private readonly pbc::RepeatedField<global::Save_GameboardCodeGroup> pythonCodeGroups_ = new pbc::RepeatedField<global::Save_GameboardCodeGroup>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Save_GameboardCodeGroup> PythonCodeGroups {
    get { return pythonCodeGroups_; }
  }

  /// <summary>Field number for the "objects" field.</summary>
  public const int ObjectsFieldNumber = 7;
  private static readonly pb::FieldCodec<global::Save_GameboardObject> _repeated_objects_codec
      = pb::FieldCodec.ForMessage(58, global::Save_GameboardObject.Parser);
  private readonly pbc::RepeatedField<global::Save_GameboardObject> objects_ = new pbc::RepeatedField<global::Save_GameboardObject>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Save_GameboardObject> Objects {
    get { return objects_; }
  }

  /// <summary>Field number for the "assets_info" field.</summary>
  public const int AssetsInfoFieldNumber = 8;
  private static readonly pb::FieldCodec<global::Save_GameboardObjectAssetInfo> _repeated_assetsInfo_codec
      = pb::FieldCodec.ForMessage(66, global::Save_GameboardObjectAssetInfo.Parser);
  private readonly pbc::RepeatedField<global::Save_GameboardObjectAssetInfo> assetsInfo_ = new pbc::RepeatedField<global::Save_GameboardObjectAssetInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Save_GameboardObjectAssetInfo> AssetsInfo {
    get { return assetsInfo_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Save_Gameboard);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Save_Gameboard other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Version != other.Version) return false;
    if (ThemeId != other.ThemeId) return false;
    if (SourceCodeAvailable != other.SourceCodeAvailable) return false;
    if(!robots_.Equals(other.robots_)) return false;
    if(!visualCodeGroups_.Equals(other.visualCodeGroups_)) return false;
    if(!pythonCodeGroups_.Equals(other.pythonCodeGroups_)) return false;
    if(!objects_.Equals(other.objects_)) return false;
    if(!assetsInfo_.Equals(other.assetsInfo_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Version != 0) hash ^= Version.GetHashCode();
    if (ThemeId != 0) hash ^= ThemeId.GetHashCode();
    if (SourceCodeAvailable != false) hash ^= SourceCodeAvailable.GetHashCode();
    hash ^= robots_.GetHashCode();
    hash ^= visualCodeGroups_.GetHashCode();
    hash ^= pythonCodeGroups_.GetHashCode();
    hash ^= objects_.GetHashCode();
    hash ^= assetsInfo_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Version != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Version);
    }
    if (ThemeId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ThemeId);
    }
    if (SourceCodeAvailable != false) {
      output.WriteRawTag(24);
      output.WriteBool(SourceCodeAvailable);
    }
    robots_.WriteTo(output, _repeated_robots_codec);
    visualCodeGroups_.WriteTo(output, _repeated_visualCodeGroups_codec);
    pythonCodeGroups_.WriteTo(output, _repeated_pythonCodeGroups_codec);
    objects_.WriteTo(output, _repeated_objects_codec);
    assetsInfo_.WriteTo(output, _repeated_assetsInfo_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Version != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
    }
    if (ThemeId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ThemeId);
    }
    if (SourceCodeAvailable != false) {
      size += 1 + 1;
    }
    size += robots_.CalculateSize(_repeated_robots_codec);
    size += visualCodeGroups_.CalculateSize(_repeated_visualCodeGroups_codec);
    size += pythonCodeGroups_.CalculateSize(_repeated_pythonCodeGroups_codec);
    size += objects_.CalculateSize(_repeated_objects_codec);
    size += assetsInfo_.CalculateSize(_repeated_assetsInfo_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Save_Gameboard other) {
    if (other == null) {
      return;
    }
    if (other.Version != 0) {
      Version = other.Version;
    }
    if (other.ThemeId != 0) {
      ThemeId = other.ThemeId;
    }
    if (other.SourceCodeAvailable != false) {
      SourceCodeAvailable = other.SourceCodeAvailable;
    }
    robots_.Add(other.robots_);
    visualCodeGroups_.Add(other.visualCodeGroups_);
    pythonCodeGroups_.Add(other.pythonCodeGroups_);
    objects_.Add(other.objects_);
    assetsInfo_.Add(other.assetsInfo_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Version = input.ReadInt32();
          break;
        }
        case 16: {
          ThemeId = input.ReadInt32();
          break;
        }
        case 24: {
          SourceCodeAvailable = input.ReadBool();
          break;
        }
        case 34: {
          robots_.AddEntriesFrom(input, _repeated_robots_codec);
          break;
        }
        case 42: {
          visualCodeGroups_.AddEntriesFrom(input, _repeated_visualCodeGroups_codec);
          break;
        }
        case 50: {
          pythonCodeGroups_.AddEntriesFrom(input, _repeated_pythonCodeGroups_codec);
          break;
        }
        case 58: {
          objects_.AddEntriesFrom(input, _repeated_objects_codec);
          break;
        }
        case 66: {
          assetsInfo_.AddEntriesFrom(input, _repeated_assetsInfo_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class Save_CodeSession : pb::IMessage<Save_CodeSession> {
  private static readonly pb::MessageParser<Save_CodeSession> _parser = new pb::MessageParser<Save_CodeSession>(() => new Save_CodeSession());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Save_CodeSession> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StackReflection.Descriptor.MessageTypes[27]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_CodeSession() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_CodeSession(Save_CodeSession other) : this() {
    workingDirectory_ = other.workingDirectory_;
    name_ = other.name_;
    code_ = other.code_;
    messages_ = other.messages_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Save_CodeSession Clone() {
    return new Save_CodeSession(this);
  }

  /// <summary>Field number for the "working_directory" field.</summary>
  public const int WorkingDirectoryFieldNumber = 1;
  private string workingDirectory_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string WorkingDirectory {
    get { return workingDirectory_; }
    set {
      workingDirectory_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "code" field.</summary>
  public const int CodeFieldNumber = 3;
  private pb::ByteString code_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Code {
    get { return code_; }
    set {
      code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "messages" field.</summary>
  public const int MessagesFieldNumber = 4;
  private pb::ByteString messages_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Messages {
    get { return messages_; }
    set {
      messages_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Save_CodeSession);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Save_CodeSession other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (WorkingDirectory != other.WorkingDirectory) return false;
    if (Name != other.Name) return false;
    if (Code != other.Code) return false;
    if (Messages != other.Messages) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (WorkingDirectory.Length != 0) hash ^= WorkingDirectory.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Code.Length != 0) hash ^= Code.GetHashCode();
    if (Messages.Length != 0) hash ^= Messages.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (WorkingDirectory.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(WorkingDirectory);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (Code.Length != 0) {
      output.WriteRawTag(26);
      output.WriteBytes(Code);
    }
    if (Messages.Length != 0) {
      output.WriteRawTag(34);
      output.WriteBytes(Messages);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (WorkingDirectory.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(WorkingDirectory);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Code.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Code);
    }
    if (Messages.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Messages);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Save_CodeSession other) {
    if (other == null) {
      return;
    }
    if (other.WorkingDirectory.Length != 0) {
      WorkingDirectory = other.WorkingDirectory;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Code.Length != 0) {
      Code = other.Code;
    }
    if (other.Messages.Length != 0) {
      Messages = other.Messages;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          WorkingDirectory = input.ReadString();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Code = input.ReadBytes();
          break;
        }
        case 34: {
          Messages = input.ReadBytes();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
